/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document:
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::{configuration, request as __internal_request, Error};
use crate::models;

pub struct DefaultApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> DefaultApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient { configuration }
    }
}

pub trait DefaultApi {
    fn elevate_session_post(&self) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn elevate_temporary_post(
        &self,
        elevate_temporary_payload: models::ElevateTemporaryPayload,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn launch_post(
        &self,
        launch_payload: models::LaunchPayload,
    ) -> Pin<Box<dyn Future<Output = Result<models::LaunchResponse, Error>>>>;
    fn logs_get(&self) -> Pin<Box<dyn Future<Output = Result<Vec<models::ElevationResult>, Error>>>>;
    fn policy_assignments_get(&self) -> Pin<Box<dyn Future<Output = Result<Vec<models::Assignment>, Error>>>>;
    fn policy_assignments_id_put(
        &self,
        id: &str,
        user: Vec<models::User>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn policy_me_get(&self) -> Pin<Box<dyn Future<Output = Result<models::GetProfilesMeResponse, Error>>>>;
    fn policy_me_put(&self, optional_id: models::OptionalId) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn policy_profiles_get(&self) -> Pin<Box<dyn Future<Output = Result<Vec<uuid::Uuid>, Error>>>>;
    fn policy_profiles_id_delete(&self, id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn policy_profiles_id_get(&self, id: &str) -> Pin<Box<dyn Future<Output = Result<models::Profile, Error>>>>;
    fn policy_profiles_id_put(
        &self,
        id: &str,
        profile: models::Profile,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn policy_profiles_post(&self, profile: models::Profile) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn revoke_post(&self) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn status_get(&self) -> Pin<Box<dyn Future<Output = Result<models::StatusResponse, Error>>>>;
}

impl<C: hyper::client::connect::Connect> DefaultApi for DefaultApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn elevate_session_post(&self) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/elevate/session".to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn elevate_temporary_post(
        &self,
        elevate_temporary_payload: models::ElevateTemporaryPayload,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/elevate/temporary".to_string());
        req = req.with_body_param(elevate_temporary_payload);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn launch_post(
        &self,
        launch_payload: models::LaunchPayload,
    ) -> Pin<Box<dyn Future<Output = Result<models::LaunchResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/launch".to_string());
        req = req.with_body_param(launch_payload);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn logs_get(&self) -> Pin<Box<dyn Future<Output = Result<Vec<models::ElevationResult>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/logs".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_assignments_get(&self) -> Pin<Box<dyn Future<Output = Result<Vec<models::Assignment>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/policy/assignments".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_assignments_id_put(
        &self,
        id: &str,
        user: Vec<models::User>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/policy/assignments/{id}".to_string());
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(user);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_me_get(&self) -> Pin<Box<dyn Future<Output = Result<models::GetProfilesMeResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/policy/me".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_me_put(&self, optional_id: models::OptionalId) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/policy/me".to_string());
        req = req.with_body_param(optional_id);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_profiles_get(&self) -> Pin<Box<dyn Future<Output = Result<Vec<uuid::Uuid>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/policy/profiles".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_profiles_id_delete(&self, id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/policy/profiles/{id}".to_string());
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_profiles_id_get(&self, id: &str) -> Pin<Box<dyn Future<Output = Result<models::Profile, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/policy/profiles/{id}".to_string());
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_profiles_id_put(
        &self,
        id: &str,
        profile: models::Profile,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/policy/profiles/{id}".to_string());
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(profile);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn policy_profiles_post(&self, profile: models::Profile) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/policy/profiles".to_string());
        req = req.with_body_param(profile);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn revoke_post(&self) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/revoke".to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn status_get(&self) -> Pin<Box<dyn Future<Output = Result<models::StatusResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status".to_string());

        req.execute(self.configuration.borrow())
    }
}
