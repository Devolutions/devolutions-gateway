/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// JitElevationLogQueryOptions
    /// </summary>
    [DataContract(Name = "JitElevationLogQueryOptions")]
    public partial class JitElevationLogQueryOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JitElevationLogQueryOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JitElevationLogQueryOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JitElevationLogQueryOptions" /> class.
        /// </summary>
        /// <param name="endTime">endTime (required).</param>
        /// <param name="pageNumber">pageNumber (required).</param>
        /// <param name="pageSize">pageSize (required).</param>
        /// <param name="sortColumn">sortColumn (required).</param>
        /// <param name="sortDescending">sortDescending (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="user">user.</param>
        public JitElevationLogQueryOptions(long endTime = default(long), int pageNumber = default(int), int pageSize = default(int), string sortColumn = default(string), bool sortDescending = default(bool), long startTime = default(long), User user = default(User))
        {
            this.EndTime = endTime;
            this.PageNumber = pageNumber;
            this.PageSize = pageSize;
            // to ensure "sortColumn" is required (not null)
            if (sortColumn == null)
            {
                throw new ArgumentNullException("sortColumn is a required property for JitElevationLogQueryOptions and cannot be null");
            }
            this.SortColumn = sortColumn;
            this.SortDescending = sortDescending;
            this.StartTime = startTime;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "EndTime", IsRequired = true, EmitDefaultValue = true)]
        public long EndTime { get; set; }

        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name = "PageNumber", IsRequired = true, EmitDefaultValue = true)]
        public int PageNumber { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name = "PageSize", IsRequired = true, EmitDefaultValue = true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or Sets SortColumn
        /// </summary>
        [DataMember(Name = "SortColumn", IsRequired = true, EmitDefaultValue = true)]
        public string SortColumn { get; set; }

        /// <summary>
        /// Gets or Sets SortDescending
        /// </summary>
        [DataMember(Name = "SortDescending", IsRequired = true, EmitDefaultValue = true)]
        public bool SortDescending { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "StartTime", IsRequired = true, EmitDefaultValue = true)]
        public long StartTime { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "User", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JitElevationLogQueryOptions {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  SortColumn: ").Append(SortColumn).Append("\n");
            sb.Append("  SortDescending: ").Append(SortDescending).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PageNumber (int) minimum
            if (this.PageNumber < (int)0)
            {
                yield return new ValidationResult("Invalid value for PageNumber, must be a value greater than or equal to 0.", new [] { "PageNumber" });
            }

            // PageSize (int) minimum
            if (this.PageSize < (int)0)
            {
                yield return new ValidationResult("Invalid value for PageSize, must be a value greater than or equal to 0.", new [] { "PageSize" });
            }

            yield break;
        }
    }

}
