/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// LaunchResponse
    /// </summary>
    [DataContract(Name = "LaunchResponse")]
    public partial class LaunchResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LaunchResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LaunchResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LaunchResponse" /> class.
        /// </summary>
        /// <param name="processId">processId (required).</param>
        /// <param name="threadId">threadId (required).</param>
        public LaunchResponse(int processId = default(int), int threadId = default(int))
        {
            this.ProcessId = processId;
            this.ThreadId = threadId;
        }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "ProcessId", IsRequired = true, EmitDefaultValue = true)]
        public int ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [DataMember(Name = "ThreadId", IsRequired = true, EmitDefaultValue = true)]
        public int ThreadId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LaunchResponse {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProcessId (int) minimum
            if (this.ProcessId < (int)0)
            {
                yield return new ValidationResult("Invalid value for ProcessId, must be a value greater than or equal to 0.", new [] { "ProcessId" });
            }

            // ThreadId (int) minimum
            if (this.ThreadId < (int)0)
            {
                yield return new ValidationResult("Invalid value for ThreadId, must be a value greater than or equal to 0.", new [] { "ThreadId" });
            }

            yield break;
        }
    }

}
