/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// JitElevationLogRow
    /// </summary>
    [DataContract(Name = "JitElevationLogRow")]
    public partial class JitElevationLogRow : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JitElevationLogRow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JitElevationLogRow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JitElevationLogRow" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="success">success (required).</param>
        /// <param name="targetPath">targetPath (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="user">user (required).</param>
        public JitElevationLogRow(long id = default(long), long success = default(long), string targetPath = default(string), long timestamp = default(long), User user = default(User))
        {
            this.Id = id;
            this.Success = success;
            // to ensure "targetPath" is required (not null)
            if (targetPath == null)
            {
                throw new ArgumentNullException("targetPath is a required property for JitElevationLogRow and cannot be null");
            }
            this.TargetPath = targetPath;
            this.Timestamp = timestamp;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for JitElevationLogRow and cannot be null");
            }
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "Success", IsRequired = true, EmitDefaultValue = true)]
        public long Success { get; set; }

        /// <summary>
        /// Gets or Sets TargetPath
        /// </summary>
        [DataMember(Name = "TargetPath", IsRequired = true, EmitDefaultValue = true)]
        public string TargetPath { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", IsRequired = true, EmitDefaultValue = true)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "User", IsRequired = true, EmitDefaultValue = true)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JitElevationLogRow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  TargetPath: ").Append(TargetPath).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
