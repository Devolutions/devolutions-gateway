/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// ApplicationFilter
    /// </summary>
    [DataContract(Name = "ApplicationFilter")]
    public partial class ApplicationFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationFilter" /> class.
        /// </summary>
        /// <param name="commandLine">commandLine.</param>
        /// <param name="hashes">hashes.</param>
        /// <param name="path">path (required).</param>
        /// <param name="signature">signature.</param>
        /// <param name="workingDirectory">workingDirectory.</param>
        public ApplicationFilter(List<StringFilter> commandLine = default(List<StringFilter>), List<HashFilter> hashes = default(List<HashFilter>), PathFilter path = default(PathFilter), SignatureFilter signature = default(SignatureFilter), PathFilter workingDirectory = default(PathFilter))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for ApplicationFilter and cannot be null");
            }
            this.Path = path;
            this.CommandLine = commandLine;
            this.Hashes = hashes;
            this.Signature = signature;
            this.WorkingDirectory = workingDirectory;
        }

        /// <summary>
        /// Gets or Sets CommandLine
        /// </summary>
        [DataMember(Name = "CommandLine", EmitDefaultValue = false)]
        public List<StringFilter> CommandLine { get; set; }

        /// <summary>
        /// Gets or Sets Hashes
        /// </summary>
        [DataMember(Name = "Hashes", EmitDefaultValue = false)]
        public List<HashFilter> Hashes { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "Path", IsRequired = true, EmitDefaultValue = true)]
        public PathFilter Path { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "Signature", EmitDefaultValue = false)]
        public SignatureFilter Signature { get; set; }

        /// <summary>
        /// Gets or Sets WorkingDirectory
        /// </summary>
        [DataMember(Name = "WorkingDirectory", EmitDefaultValue = false)]
        public PathFilter WorkingDirectory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationFilter {\n");
            sb.Append("  CommandLine: ").Append(CommandLine).Append("\n");
            sb.Append("  Hashes: ").Append(Hashes).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  WorkingDirectory: ").Append(WorkingDirectory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
