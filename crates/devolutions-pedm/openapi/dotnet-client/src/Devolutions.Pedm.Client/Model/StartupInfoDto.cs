/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// StartupInfoDto
    /// </summary>
    [DataContract(Name = "StartupInfoDto")]
    public partial class StartupInfoDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StartupInfoDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StartupInfoDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StartupInfoDto" /> class.
        /// </summary>
        /// <param name="desktop">desktop.</param>
        /// <param name="fillAttribute">fillAttribute (required).</param>
        /// <param name="flags">flags (required).</param>
        /// <param name="parentPid">parentPid.</param>
        /// <param name="showWindow">showWindow (required).</param>
        /// <param name="title">title.</param>
        /// <param name="x">x (required).</param>
        /// <param name="xCountChars">xCountChars (required).</param>
        /// <param name="xSize">xSize (required).</param>
        /// <param name="y">y (required).</param>
        /// <param name="yCountChars">yCountChars (required).</param>
        /// <param name="ySize">ySize (required).</param>
        public StartupInfoDto(string desktop = default(string), int fillAttribute = default(int), int flags = default(int), int parentPid = default(int), int showWindow = default(int), string title = default(string), int x = default(int), int xCountChars = default(int), int xSize = default(int), int y = default(int), int yCountChars = default(int), int ySize = default(int))
        {
            this.FillAttribute = fillAttribute;
            this.Flags = flags;
            this.ShowWindow = showWindow;
            this.X = x;
            this.XCountChars = xCountChars;
            this.XSize = xSize;
            this.Y = y;
            this.YCountChars = yCountChars;
            this.YSize = ySize;
            this.Desktop = desktop;
            this.ParentPid = parentPid;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets Desktop
        /// </summary>
        [DataMember(Name = "Desktop", EmitDefaultValue = false)]
        public string Desktop { get; set; }

        /// <summary>
        /// Gets or Sets FillAttribute
        /// </summary>
        [DataMember(Name = "FillAttribute", IsRequired = true, EmitDefaultValue = true)]
        public int FillAttribute { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name = "Flags", IsRequired = true, EmitDefaultValue = true)]
        public int Flags { get; set; }

        /// <summary>
        /// Gets or Sets ParentPid
        /// </summary>
        [DataMember(Name = "ParentPid", EmitDefaultValue = false)]
        public int ParentPid { get; set; }

        /// <summary>
        /// Gets or Sets ShowWindow
        /// </summary>
        [DataMember(Name = "ShowWindow", IsRequired = true, EmitDefaultValue = true)]
        public int ShowWindow { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "X", IsRequired = true, EmitDefaultValue = true)]
        public int X { get; set; }

        /// <summary>
        /// Gets or Sets XCountChars
        /// </summary>
        [DataMember(Name = "XCountChars", IsRequired = true, EmitDefaultValue = true)]
        public int XCountChars { get; set; }

        /// <summary>
        /// Gets or Sets XSize
        /// </summary>
        [DataMember(Name = "XSize", IsRequired = true, EmitDefaultValue = true)]
        public int XSize { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "Y", IsRequired = true, EmitDefaultValue = true)]
        public int Y { get; set; }

        /// <summary>
        /// Gets or Sets YCountChars
        /// </summary>
        [DataMember(Name = "YCountChars", IsRequired = true, EmitDefaultValue = true)]
        public int YCountChars { get; set; }

        /// <summary>
        /// Gets or Sets YSize
        /// </summary>
        [DataMember(Name = "YSize", IsRequired = true, EmitDefaultValue = true)]
        public int YSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StartupInfoDto {\n");
            sb.Append("  Desktop: ").Append(Desktop).Append("\n");
            sb.Append("  FillAttribute: ").Append(FillAttribute).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  ParentPid: ").Append(ParentPid).Append("\n");
            sb.Append("  ShowWindow: ").Append(ShowWindow).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  XCountChars: ").Append(XCountChars).Append("\n");
            sb.Append("  XSize: ").Append(XSize).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  YCountChars: ").Append(YCountChars).Append("\n");
            sb.Append("  YSize: ").Append(YSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FillAttribute (int) minimum
            if (this.FillAttribute < (int)0)
            {
                yield return new ValidationResult("Invalid value for FillAttribute, must be a value greater than or equal to 0.", new [] { "FillAttribute" });
            }

            // Flags (int) minimum
            if (this.Flags < (int)0)
            {
                yield return new ValidationResult("Invalid value for Flags, must be a value greater than or equal to 0.", new [] { "Flags" });
            }

            // ParentPid (int) minimum
            if (this.ParentPid < (int)0)
            {
                yield return new ValidationResult("Invalid value for ParentPid, must be a value greater than or equal to 0.", new [] { "ParentPid" });
            }

            // ShowWindow (int) minimum
            if (this.ShowWindow < (int)0)
            {
                yield return new ValidationResult("Invalid value for ShowWindow, must be a value greater than or equal to 0.", new [] { "ShowWindow" });
            }

            // X (int) minimum
            if (this.X < (int)0)
            {
                yield return new ValidationResult("Invalid value for X, must be a value greater than or equal to 0.", new [] { "X" });
            }

            // XCountChars (int) minimum
            if (this.XCountChars < (int)0)
            {
                yield return new ValidationResult("Invalid value for XCountChars, must be a value greater than or equal to 0.", new [] { "XCountChars" });
            }

            // XSize (int) minimum
            if (this.XSize < (int)0)
            {
                yield return new ValidationResult("Invalid value for XSize, must be a value greater than or equal to 0.", new [] { "XSize" });
            }

            // Y (int) minimum
            if (this.Y < (int)0)
            {
                yield return new ValidationResult("Invalid value for Y, must be a value greater than or equal to 0.", new [] { "Y" });
            }

            // YCountChars (int) minimum
            if (this.YCountChars < (int)0)
            {
                yield return new ValidationResult("Invalid value for YCountChars, must be a value greater than or equal to 0.", new [] { "YCountChars" });
            }

            // YSize (int) minimum
            if (this.YSize < (int)0)
            {
                yield return new ValidationResult("Invalid value for YSize, must be a value greater than or equal to 0.", new [] { "YSize" });
            }

            yield break;
        }
    }

}
