/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// ElevationRequest
    /// </summary>
    [DataContract(Name = "ElevationRequest")]
    public partial class ElevationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElevationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ElevationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElevationRequest" /> class.
        /// </summary>
        /// <param name="asker">asker (required).</param>
        /// <param name="target">target (required).</param>
        /// <param name="unixTimestampSeconds">unixTimestampSeconds (required).</param>
        public ElevationRequest(Application asker = default(Application), Application target = default(Application), long unixTimestampSeconds = default(long))
        {
            // to ensure "asker" is required (not null)
            if (asker == null)
            {
                throw new ArgumentNullException("asker is a required property for ElevationRequest and cannot be null");
            }
            this.Asker = asker;
            // to ensure "target" is required (not null)
            if (target == null)
            {
                throw new ArgumentNullException("target is a required property for ElevationRequest and cannot be null");
            }
            this.Target = target;
            this.UnixTimestampSeconds = unixTimestampSeconds;
        }

        /// <summary>
        /// Gets or Sets Asker
        /// </summary>
        [DataMember(Name = "Asker", IsRequired = true, EmitDefaultValue = true)]
        public Application Asker { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "Target", IsRequired = true, EmitDefaultValue = true)]
        public Application Target { get; set; }

        /// <summary>
        /// Gets or Sets UnixTimestampSeconds
        /// </summary>
        [DataMember(Name = "UnixTimestampSeconds", IsRequired = true, EmitDefaultValue = true)]
        public long UnixTimestampSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ElevationRequest {\n");
            sb.Append("  Asker: ").Append(Asker).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  UnixTimestampSeconds: ").Append(UnixTimestampSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnixTimestampSeconds (long) minimum
            if (this.UnixTimestampSeconds < (long)0)
            {
                yield return new ValidationResult("Invalid value for UnixTimestampSeconds, must be a value greater than or equal to 0.", new [] { "UnixTimestampSeconds" });
            }

            yield break;
        }
    }

}
