/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected User() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="accountName">accountName (required).</param>
        /// <param name="accountSid">accountSid (required).</param>
        /// <param name="domainName">domainName (required).</param>
        /// <param name="domainSid">domainSid (required).</param>
        public User(string accountName = default(string), string accountSid = default(string), string domainName = default(string), string domainSid = default(string))
        {
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName is a required property for User and cannot be null");
            }
            this.AccountName = accountName;
            // to ensure "accountSid" is required (not null)
            if (accountSid == null)
            {
                throw new ArgumentNullException("accountSid is a required property for User and cannot be null");
            }
            this.AccountSid = accountSid;
            // to ensure "domainName" is required (not null)
            if (domainName == null)
            {
                throw new ArgumentNullException("domainName is a required property for User and cannot be null");
            }
            this.DomainName = domainName;
            // to ensure "domainSid" is required (not null)
            if (domainSid == null)
            {
                throw new ArgumentNullException("domainSid is a required property for User and cannot be null");
            }
            this.DomainSid = domainSid;
        }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name = "AccountName", IsRequired = true, EmitDefaultValue = true)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets AccountSid
        /// </summary>
        [DataMember(Name = "AccountSid", IsRequired = true, EmitDefaultValue = true)]
        public string AccountSid { get; set; }

        /// <summary>
        /// Gets or Sets DomainName
        /// </summary>
        [DataMember(Name = "DomainName", IsRequired = true, EmitDefaultValue = true)]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets DomainSid
        /// </summary>
        [DataMember(Name = "DomainSid", IsRequired = true, EmitDefaultValue = true)]
        public string DomainSid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountSid: ").Append(AccountSid).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  DomainSid: ").Append(DomainSid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
