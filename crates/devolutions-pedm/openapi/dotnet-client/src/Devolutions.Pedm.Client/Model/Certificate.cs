/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// Certificate
    /// </summary>
    [DataContract(Name = "Certificate")]
    public partial class Certificate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Certificate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Certificate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Certificate" /> class.
        /// </summary>
        /// <param name="base64">base64 (required).</param>
        /// <param name="eku">eku (required).</param>
        /// <param name="issuer">issuer (required).</param>
        /// <param name="serialNumber">serialNumber (required).</param>
        /// <param name="subject">subject (required).</param>
        /// <param name="thumbprint">thumbprint (required).</param>
        public Certificate(string base64 = default(string), List<string> eku = default(List<string>), string issuer = default(string), string serialNumber = default(string), string subject = default(string), Hash thumbprint = default(Hash))
        {
            // to ensure "base64" is required (not null)
            if (base64 == null)
            {
                throw new ArgumentNullException("base64 is a required property for Certificate and cannot be null");
            }
            this.Base64 = base64;
            // to ensure "eku" is required (not null)
            if (eku == null)
            {
                throw new ArgumentNullException("eku is a required property for Certificate and cannot be null");
            }
            this.Eku = eku;
            // to ensure "issuer" is required (not null)
            if (issuer == null)
            {
                throw new ArgumentNullException("issuer is a required property for Certificate and cannot be null");
            }
            this.Issuer = issuer;
            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new ArgumentNullException("serialNumber is a required property for Certificate and cannot be null");
            }
            this.SerialNumber = serialNumber;
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for Certificate and cannot be null");
            }
            this.Subject = subject;
            // to ensure "thumbprint" is required (not null)
            if (thumbprint == null)
            {
                throw new ArgumentNullException("thumbprint is a required property for Certificate and cannot be null");
            }
            this.Thumbprint = thumbprint;
        }

        /// <summary>
        /// Gets or Sets Base64
        /// </summary>
        [DataMember(Name = "Base64", IsRequired = true, EmitDefaultValue = true)]
        public string Base64 { get; set; }

        /// <summary>
        /// Gets or Sets Eku
        /// </summary>
        [DataMember(Name = "Eku", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Eku { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "Issuer", IsRequired = true, EmitDefaultValue = true)]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name = "SerialNumber", IsRequired = true, EmitDefaultValue = true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "Subject", IsRequired = true, EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Thumbprint
        /// </summary>
        [DataMember(Name = "Thumbprint", IsRequired = true, EmitDefaultValue = true)]
        public Hash Thumbprint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Certificate {\n");
            sb.Append("  Base64: ").Append(Base64).Append("\n");
            sb.Append("  Eku: ").Append(Eku).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Thumbprint: ").Append(Thumbprint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
