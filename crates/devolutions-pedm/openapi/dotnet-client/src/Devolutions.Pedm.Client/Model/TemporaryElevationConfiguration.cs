/*
 * Devolutions PEDM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Pedm.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Pedm.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Pedm.Client.Model
{
    /// <summary>
    /// TemporaryElevationConfiguration
    /// </summary>
    [DataContract(Name = "TemporaryElevationConfiguration")]
    public partial class TemporaryElevationConfiguration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemporaryElevationConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemporaryElevationConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemporaryElevationConfiguration" /> class.
        /// </summary>
        /// <param name="enabled">enabled (required).</param>
        /// <param name="maximumSeconds">maximumSeconds (required).</param>
        public TemporaryElevationConfiguration(bool enabled = default(bool), long maximumSeconds = default(long))
        {
            this.Enabled = enabled;
            this.MaximumSeconds = maximumSeconds;
        }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "Enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets MaximumSeconds
        /// </summary>
        [DataMember(Name = "MaximumSeconds", IsRequired = true, EmitDefaultValue = true)]
        public long MaximumSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemporaryElevationConfiguration {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  MaximumSeconds: ").Append(MaximumSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaximumSeconds (long) minimum
            if (this.MaximumSeconds < (long)0)
            {
                yield return new ValidationResult("Invalid value for MaximumSeconds, must be a value greater than or equal to 0.", new [] { "MaximumSeconds" });
            }

            yield break;
        }
    }

}
