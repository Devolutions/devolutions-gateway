name: CI

on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        description: "The commit SHA to build"
        required: false
        type: string

env:
  conan-version: 1.43.4

jobs:

  preflight:
    name: preflight
    runs-on: ubuntu-20.04
    outputs:
      ref: ${{ steps.get-commit.outputs.ref }}
      version: ${{ steps.get-version.outputs.version }}
      rust-channel: ${{ steps.rust-toolchain.outputs.rust-channel }}
      rust-profile: ${{ steps.rust-profile.outputs.rust-profile }}

    steps:
      ## The SHA to build might be passed via workflow_call, otherwise the current commit is used
      - name: Get commit
        id: get-commit
        shell: pwsh
        run: |
          $Ref = '${{ inputs.ref }}'
          if (-Not $Ref) {
            $Ref = '${{ github.sha }}'
          }
          echo "::set-output name=ref::$Ref"

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get-commit.outputs.ref }}

      - name: Get version
        id: get-version
        shell: pwsh
        run: |
          $Version = Get-Content VERSION -TotalCount 1
          echo "::set-output name=version::$Version"

      - name: Configure rust toolchain
        id: rust-toolchain
        shell: pwsh
        run: |
          $Channel = (Get-Content 'rust-toolchain.toml' | Select -Skip 1 | ConvertFrom-StringData).channel
          rustup toolchain install $Channel
          rustup component add rustfmt
          echo "::set-output name=rust-channel::$Channel"

      - name: Check formatting
        run: |
          cargo fmt --all -- --check
          if ! [ $? -eq 0 ] ; then
              echo "::error::Bad formatting, please run 'cargo +stable fmt --all'"
              exit 1
          fi

      - name: Configure rust profile
        id: rust-profile
        shell: pwsh
        run: |
          $CargoProfile = "release"
          if ("${{ github.ref }}" -Eq "refs/heads/master") {
            echo "::notice::Building production profile" 
            $CargoProfile = "production"
          }
        
          echo "::set-output name=rust-profile::$CargoProfile"

      - name: Upload version artifact
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: VERSION

  test:
      name: test [${{ matrix.os }} ${{ matrix.arch }}]
      runs-on: ${{ matrix.runner }}
      needs: preflight
      env:
        CONAN_LOGIN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
        CONAN_PASSWORD: ${{ secrets.ARTIFACTORY_READ_TOKEN }}
      strategy:
        matrix:
          arch: [ x86_64 ]
          os: [ windows, linux ]
          include:
            - os: windows
              runner: windows-2022
            - os: linux
              runner: ubuntu-20.04

      steps:
        - name: Checkout ${{ github.repository }}
          uses: actions/checkout@v3
          with:
            ref: ${{ needs.preflight.outputs.ref }}

        - name: Configure rust toolchain
          run: rustup toolchain install ${{ needs.preflight.outputs.rust-channel }}

        - name: Configure Linux runner
          if: matrix.os == 'linux'
          run: |
            sudo apt update
            sudo apt install python3-wget python3-setuptools libsystemd-dev

        - name: Configure conan
          run: |
            pip3 install conan==${{ env.conan-version }} --upgrade
            conan config install --type=git -sf settings https://github.com/Devolutions/conan-public
            conan remote clean
            conan remote add artifactory https://devolutions.jfrog.io/devolutions/api/conan/conan-local

        - name: Test
          shell: pwsh
          run: ./ci/tlk.ps1 test -Platform ${{ matrix.os }} -Architecture ${{ matrix.arch }} -CargoProfile ${{ needs.preflight.outputs.rust-profile }}


  jetsocat:
    name: jetsocat [${{ matrix.os }} ${{ matrix.arch }}]
    runs-on: ${{ matrix.runner }}
    needs: preflight
    env:
      CONAN_LOGIN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.ARTIFACTORY_READ_TOKEN }}
    strategy:
      matrix:
        arch: [ x86, x86_64, arm64 ]
        os: [ windows, macos, linux ]
        include:
          - os: windows
            runner: windows-2019
          - os: macos
            runner: macos-11
          - os: linux
            runner: ubuntu-20.04
        exclude:
          - arch: x86
            os: macos
          - arch: x86
            os: linux
          - arch: arm64
            os: linux

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.preflight.outputs.ref }}

      - name: Configure rust toolchain
        run: rustup toolchain install ${{ needs.preflight.outputs.rust-channel }}

      - name: Configure Linux runner
        if: matrix.os == 'linux'
        run: |
          sudo apt update
          sudo apt install python3-wget python3-setuptools

      - name: Configure Windows runner
        if: matrix.os == 'windows' && matrix.arch == 'x86'
        run: rustup target add i686-pc-windows-msvc

      - name: Fix ring dependency for Windows ARM64
        if: runner.os == 'Windows' && matrix.arch == 'arm64'
        shell: pwsh
        run: |
          rustup target add aarch64-pc-windows-msvc
          @('', '[patch.crates-io]',
          'ring = { git = "https://github.com/awakecoding/ring", branch = "0.16.20_alpha" }') | % {
            Add-Content -Path "./Cargo.toml" -Value $_
          }
          $VSINSTALLDIR = $(vswhere.exe -latest -requires Microsoft.VisualStudio.Component.VC.Llvm.Clang -property installationPath)
          $VCINSTALLDIR = Join-Path $VSINSTALLDIR "VC"
          $LLVM_ROOT = Join-Path $VCINSTALLDIR "Tools\Llvm\x64"
          echo "PATH=$Env:PATH;${LLVM_ROOT}\bin" >> $Env:GITHUB_ENV

      - name: Configure macOS (arm) runner
        if: matrix.os == 'macos' && matrix.arch == 'arm64'
        run: |
          sudo rm -rf /Library/Developer/CommandLineTools
          rustup target add aarch64-apple-darwin

      - name: Configure conan
        run: |
          pip3 install conan==${{ env.conan-version }} --upgrade
          conan config install --type=git -sf settings https://github.com/Devolutions/conan-public
          conan remote clean
          conan remote add artifactory https://devolutions.jfrog.io/devolutions/api/conan/conan-local

      - name: Build
        id: build
        shell: pwsh
        run: |
          $StagingPath = Join-Path $Env:RUNNER_TEMP "staging"
          $TargetOutputPath = Join-Path $StagingPath ${{ matrix.os }} ${{ matrix.arch }}
          $ExecutableFileName = 'jetsocat_${{ runner.os }}_${{ needs.preflight.outputs.version }}_${{ matrix.arch }}'
          
          if ($Env:RUNNER_OS -eq "Windows") {
            $ExecutableFileName = "$($ExecutableFileName).exe"
            $Env:CARGO_NO_DEFAULT_FEATURES = "true"
            $Env:CARGO_FEATURES = "native-tls"
          }

          $Env:TARGET_OUTPUT_PATH = $TargetOutputPath
          $Env:JETSOCAT_EXECUTABLE = Join-Path $TargetOutputPath $ExecutableFileName
          $Env:CARGO_PACKAGE = "jetsocat"

          ./ci/tlk.ps1 build -Platform ${{ matrix.os }} -Architecture ${{ matrix.arch }} -CargoProfile ${{ needs.preflight.outputs.rust-profile }}

          echo "::set-output name=staging-path::$StagingPath"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jetsocat
          path: ${{ steps.build.outputs.staging-path }}

  jetsocat-lipo:
    name: jetsocat macos universal
    runs-on: ubuntu-20.04
    needs: [preflight, jetsocat]

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: jetsocat

      - name: Configure runner
        run: |
          wget -q https://github.com/awakecoding/llvm-prebuilt/releases/download/v2021.2.4/cctools-x86_64-ubuntu-20.04.tar.xz
          tar -xf cctools-x86_64-ubuntu-20.04.tar.xz -C /tmp
          sudo mv /tmp/cctools-x86_64-ubuntu-20.04/bin/lipo /usr/local/bin
          rm -r cctools-x86_64-ubuntu-20.04.tar.xz

      - name: Lipo
        shell: pwsh
        run: |
          $OutputPath = Join-Path "macos" "universal"
          New-Item -ItemType Directory -Path $OutputPath | Out-Null
          $Binaries = Get-ChildItem -Recurse -Path "macos" -Filter "jetsocat_*" | Foreach-Object { $_.FullName } | Select -Unique
          $LipoCmd = $(@('lipo', '-create', '-output', (Join-Path -Path $OutputPath -ChildPath "jetsocat_macOS_${{ needs.preflight.outputs.version }}_universal")) + $Binaries) -Join ' '
          Write-Host $LipoCmd
          Invoke-Expression $LipoCmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jetsocat
          path: .

  devolutions-gateway:
    name: devolutions-gateway [${{ matrix.os }} ${{ matrix.arch }}]
    runs-on: ${{ matrix.runner }}
    needs: preflight
    env:
      CONAN_LOGIN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.ARTIFACTORY_READ_TOKEN }}
    strategy:
      matrix:
        arch: [ x86_64 ]
        os: [ windows, linux ]
        include:
          - os: windows
            runner: windows-2019
          - os: linux
            runner: ubuntu-20.04

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.preflight.outputs.ref }}

      - name: Load dynamic variables
        id: load-variables
        shell: pwsh
        run: |
          $PackageVersion = "${{ needs.preflight.outputs.version }}"
          $StagingPath = Join-Path $Env:RUNNER_TEMP "staging"
          $TargetOutputPath = Join-Path $StagingPath ${{ matrix.os }} ${{ matrix.arch }}
          $ExecutableFileName = "DevolutionsGateway_${{ runner.os }}_${PackageVersion}_${{ matrix.arch }}"

          if ($Env:RUNNER_OS -eq "Windows") {
            $ExecutableFileName = "$($ExecutableFileName).exe"
            $PackageFileName = "DevolutionsGateway-${{ matrix.arch }}-${PackageVersion}.msi"
            $PSModuleOutputPath = Join-Path $StagingPath PowerShell
            $DGatewayPSModulePath = Join-Path $PSModuleOutputPath DevolutionsGateway
            $DGatewayPackage = Join-Path $TargetOutputPath $PackageFileName

            echo "::set-output name=psmodule-output-path::$PSModuleOutputPath"
            echo "::set-output name=dgateway-psmodule-output-path::$DGatewayPSModulePath"
            echo "::set-output name=dgateway-package::$DGatewayPackage"
          }

          $DGatewayExecutable = Join-Path $TargetOutputPath $ExecutableFileName
          echo "::set-output name=staging-path::$StagingPath"
          echo "::set-output name=target-output-path::$TargetOutputPath"
          echo "::set-output name=dgateway-executable::$DGatewayExecutable"

      - name: Configure rust toolchain
        run: rustup toolchain install ${{ needs.preflight.outputs.rust-channel }}

      - name: Configure Linux runner
        if: matrix.os == 'linux'
        run: |
          sudo apt update
          sudo apt install python3-wget python3-setuptools libsystemd-dev dh-make

      # WiX is installed on Windows runners but not in the PATH
      - name: Configure Windows runner
        if: matrix.os == 'windows'
        run: echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Configure conan
        run: |
          pip3 install conan==${{ env.conan-version }} --upgrade
          conan config install --type=git -sf settings https://github.com/Devolutions/conan-public
          conan remote clean
          conan remote add artifactory https://devolutions.jfrog.io/devolutions/api/conan/conan-local

      - name: Build
        shell: pwsh
        env:
          TARGET_OUTPUT_PATH: ${{ steps.load-variables.outputs.target-output-path }}
          DGATEWAY_EXECUTABLE: ${{ steps.load-variables.outputs.dgateway-executable }}
          CARGO_PACKAGE: devolutions-gateway
        run: ./ci/tlk.ps1 build -Platform ${{ matrix.os }} -Architecture ${{ matrix.arch }} -CargoProfile ${{ needs.preflight.outputs.rust-profile }}

      - name: Build PowerShell module
        if: matrix.os == 'windows'
        env:
          PSMODULE_OUTPUT_PATH: ${{ steps.load-variables.outputs.psmodule-output-path }}
        run: .\powershell\build.ps1

      - name: Package
        shell: pwsh
        env:
          TARGET_OUTPUT_PATH: ${{ steps.load-variables.outputs.target-output-path }}
          DGATEWAY_EXECUTABLE: ${{ steps.load-variables.outputs.dgateway-executable }}
        run: |
          if ($Env:RUNNER_OS -eq "Windows") {
            $Env:DGATEWAY_PACKAGE = "${{ steps.load-variables.outputs.dgateway-package }}"
            $Env:DGATEWAY_PSMODULE_PATH = "${{ steps.load-variables.outputs.dgateway-psmodule-output-path }}"
          }

          ./ci/tlk.ps1 package -Platform ${{ matrix.os }} -Architecture ${{ matrix.arch }} -CargoProfile ${{ needs.preflight.outputs.rust-profile }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: devolutions-gateway
          path: ${{ steps.load-variables.outputs.staging-path }}

  upload-git-log:
    name: Upload git-log output
    runs-on: ubuntu-20.04
    if: ${{ github.ref == 'refs/heads/master' }}
    needs:
      - preflight

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.preflight.outputs.ref }}
          fetch-depth: 10

      - name: Generate git log
        shell: pwsh
        run: git log --max-count=10 > ./git-log.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: git-log
          path: ./git-log.txt

  onedrive:
    name: OneDrive
    runs-on: ubuntu-20.04
    if: ${{ github.ref == 'refs/heads/master' }}
    needs:
      - preflight
      - devolutions-gateway
      - jetsocat
      - jetsocat-lipo
      - upload-git-log

    steps:
      - name: Check out Devolutions/actions
        uses: actions/checkout@v3
        with:
          repository: Devolutions/actions
          ref: master
          token: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
          path: ./.github/workflows

      ## Fetch current date and time

      - name: Get current timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M')"

      ## Devolutions Toolbox is required for OneDrive uploading

      - name: Install Devolutions Toolbox
        uses: ./.github/workflows/toolbox-install
        with:
          token: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}

      ## Download back the artifacts produced by the other jobs

      - uses: actions/download-artifact@v3
        with:
          name: jetsocat
          path: ${{ runner.temp }}/artifacts_raw

      - uses: actions/download-artifact@v3
        with:
          name: devolutions-gateway
          path: ${{ runner.temp }}/artifacts_raw

      - uses: actions/download-artifact@v3
        with:
          name: git-log
          path: ${{ runner.temp }}/artifacts_raw

      ## Do the actual upload :tada:
      
      - name: Prepare upload
        id: prepare
        shell: pwsh
        run: |
          $version="${{ needs.preflight.outputs.version }}"
          $ref="${{ needs.preflight.outputs.ref }}"
          $shortRef=$ref.Substring(0, 8)
          $sourceFolder = "${{ runner.temp }}/artifacts_raw"
          $destinationFolder = "${{ runner.temp }}/artifacts"

          Write-Host "version = $version"
          Write-Host "ref = $ref"

          Write-Host "::set-output name=version::${version}"
          Write-Host "::set-output name=short-ref::${shortRef}"
          Write-Host "::set-output name=files-to-upload::${destinationFolder}"

          New-Item -Path "$destinationFolder" -ItemType "directory"

          $allFiles = Get-ChildItem -Path "$sourceFolder" -Exclude PowerShell | Get-ChildItem -Recurse | Where { -Not $_.Mode.StartsWith('d') }

          Write-Host
        
          foreach ($file in $allFiles) {
            $dir = $file.Directory
            $name = $file.Name
            $source = "$dir/$name"
            $destination = "$destinationFolder/$name"

            Write-Host "$source --> $destination"

            Move-Item -Path "$source" -Destination "$destination"
          }

      - name: Upload to OneDrive
        uses: ./.github/workflows/upload-onedrive
        with:
          client_id: ${{ secrets.ONEDRIVE_AUTOMATION_CLIENT_ID }}
          client_secret: ${{ secrets.ONEDRIVE_AUTOMATION_CLIENT_SECRET }}          
          remote: prereleases
          destination_path: /Gateway/${{ steps.prepare.outputs.version }}-${{ steps.timestamp.outputs.timestamp }}-${{ steps.prepare.outputs.short-ref }}
          conflict_behavior: replace
          files: ${{ steps.prepare.outputs.files-to-upload }}

