# Continuous integration and deploymnent workflow for devolutions-gateway
# Builds on master will require approval to:
#  - code sign binaries
#  - build and upload containers to docker hub
#  - create a GitHub release
#  - upload PowerShell module to PSGallery

name: CI

on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

jobs:

  preflight:
    name: preflight
    runs-on: ubuntu-18.04
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      rust-channel: ${{ steps.rust-toolchain.outputs.rust-channel }}

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Get version
        id: get-version
        shell: pwsh
        run: |
          $Version = Get-Content VERSION -TotalCount 1
          echo "::set-output name=version::$Version"

      - name: Configure rust toolchain
        id: rust-toolchain
        shell: pwsh
        run: |
          $Channel = (Get-Content 'rust-toolchain.toml' | Select -Skip 1 | ConvertFrom-StringData).channel
          rustup toolchain install $Channel
          rustup component add rustfmt
          echo "::set-output name=rust-channel::$Channel"

      - name: Check formatting
        run: |
          cargo fmt --all -- --check
          if ! [ $? -eq 0 ] ; then
              echo "::error::Bad formatting, please run 'cargo +stable fmt --all'"
              exit 1
          fi

      - name: Check lto
        shell: pwsh
        if: ${{ github.ref != 'refs/heads/master' }}
        run: |
          echo "::warning::Building branch; LTO will not be enabled" 

      - name: Upload version artifact
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: VERSION

  jetsocat:
    name: jetsocat [${{ matrix.os }} ${{ matrix.arch }}]
    runs-on: ${{ matrix.runner }}
    needs: preflight
    env:
      CONAN_LOGIN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.ARTIFACTORY_READ_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86, x86_64, arm64 ]
        os: [ windows, macos, linux ]
        include:
          - os: windows
            runner: windows-2019
          - os: macos
            runner: macos-10.15
          - os: linux
            runner: ubuntu-18.04
        exclude:
          - arch: x86
            os: macos
          - arch: x86
            os: linux
          - arch: arm64
            os: windows
          - arch: arm64
            os: linux

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Enable lto
        shell: pwsh
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "CARGO_PROFILE_RELEASE_LTO=true" >> $GITHUB_ENV
          echo "::notice::Building master; LTO is enabled" 

      - name: Load dynamic variables
        id: load-variables
        shell: pwsh
        run: |
          $PackageVersion = "${{ needs.preflight.outputs.version }}"
          $StagingPath = Join-Path $Env:RUNNER_TEMP "staging"
          $TargetOutputPath = Join-Path $StagingPath ${{ matrix.os }} ${{ matrix.arch }}
          $ExecutableFileName = "jetsocat_${{ runner.os }}_${PackageVersion}_${{ matrix.arch }}"

          if ($Env:RUNNER_OS -eq "Windows") {
            $ExecutableFileName = "$($ExecutableFileName).exe"
          }

          $JetsocatExecutable = Join-Path $TargetOutputPath $ExecutableFileName
          $CargoPackage = "jetsocat"
          echo "::set-output name=staging-path::$StagingPath"
          echo "::set-output name=target-output-path::$TargetOutputPath"
          echo "::set-output name=jetsocat-executable::$JetsocatExecutable"
          echo "::set-output name=cargo-package::$CargoPackage"

      - name: Configure rust toolchain
        run: |
          rustup toolchain install ${{ needs.preflight.outputs.rust-channel }}

      - name: Configure Linux runner
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install python3-wget python3-setuptools

      - name: Configure Windows runner
        if: matrix.os == 'windows'
        run: |
          rustup target add i686-pc-windows-msvc

      - name: Configure macOS runner
        if: matrix.os == 'macos'
        run: |
          sudo rm -rf /Library/Developer/CommandLineTools
          rustup target add aarch64-apple-darwin

      - name: Configure conan
        run: |
          pip3 install conan==1.40.0 --upgrade
          conan config install --type=git -sf settings https://github.com/Devolutions/conan-public
          conan remote clean
          conan remote add artifactory https://devolutions.jfrog.io/devolutions/api/conan/conan-local

      - name: Build
        shell: pwsh
        env:
          TARGET_OUTPUT_PATH: ${{ steps.load-variables.outputs.target-output-path }}
          JETSOCAT_EXECUTABLE: ${{ steps.load-variables.outputs.jetsocat-executable }}
          CARGO_PACKAGE: ${{ steps.load-variables.outputs.cargo-package }}
        run: |
          if ($Env:RUNNER_OS -eq "Windows") {
            $Env:CARGO_NO_DEFAULT_FEATURES = "true"
            $Env:CARGO_FEATURES = "native-tls"
          }

          ./ci/tlk.ps1 build -Platform ${{ matrix.os }} -Architecture ${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jetsocat
          path: ${{ steps.load-variables.outputs.staging-path }}

  devolutions-gateway:
    name: devolutions-gateway [${{ matrix.os }} ${{ matrix.arch }}]
    runs-on: ${{ matrix.runner }}
    needs: preflight
    env:
      CONAN_LOGIN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.ARTIFACTORY_READ_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64 ]
        os: [ windows, linux ]
        include:
          - os: windows
            runner: windows-2019
          - os: linux
            runner: ubuntu-18.04

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Enable lto
        shell: pwsh
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "CARGO_PROFILE_RELEASE_LTO=true" >> $GITHUB_ENV
          echo "::notice::Building master; LTO is enabled" 

      - name: Load dynamic variables
        id: load-variables
        shell: pwsh
        run: |
          $PackageVersion = "${{ needs.preflight.outputs.version }}"
          $StagingPath = Join-Path $Env:RUNNER_TEMP "staging"
          $TargetOutputPath = Join-Path $StagingPath ${{ matrix.os }} ${{ matrix.arch }}
          $ExecutableFileName = "DevolutionsGateway_${{ runner.os }}_${PackageVersion}_${{ matrix.arch }}"

          if ($Env:RUNNER_OS -eq "Windows") {
            $ExecutableFileName = "$($ExecutableFileName).exe"
            $PackageFileName = "DevolutionsGateway-${{ matrix.arch }}-${PackageVersion}.msi"
            $PSModuleOutputPath = Join-Path $StagingPath PowerShell
            $DGatewayPSModulePath = Join-Path $PSModuleOutputPath DevolutionsGateway
            $DGatewayPackage = Join-Path $TargetOutputPath $PackageFileName

            echo "::set-output name=psmodule-output-path::$PSModuleOutputPath"
            echo "::set-output name=dgateway-psmodule-output-path::$DGatewayPSModulePath"
            echo "::set-output name=dgateway-package::$DGatewayPackage"
          }

          $DGatewayExecutable = Join-Path $TargetOutputPath $ExecutableFileName
          $CargoPackage = "devolutions-gateway"
          echo "::set-output name=staging-path::$StagingPath"
          echo "::set-output name=target-output-path::$TargetOutputPath"
          echo "::set-output name=dgateway-executable::$DGatewayExecutable"
          echo "::set-output name=cargo-package::$CargoPackage"

      - name: Configure rust toolchain
        run: |
          rustup toolchain install ${{ needs.preflight.outputs.rust-channel }}

      - name: Configure Linux runner
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install dh-make python3-wget python3-setuptools libsystemd-dev

      # WiX is installed on Windows runners but not in the PATH
      - name: Configure Windows runner
        if: runner.os == 'Windows'
        run: |
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Configure conan
        run: |
          pip3 install conan==1.40.0 --upgrade
          conan config install --type=git -sf settings https://github.com/Devolutions/conan-public
          conan remote clean
          conan remote add artifactory https://devolutions.jfrog.io/devolutions/api/conan/conan-local

      - name: Build
        shell: pwsh
        env:
          TARGET_OUTPUT_PATH: ${{ steps.load-variables.outputs.target-output-path }}
          DGATEWAY_EXECUTABLE: ${{ steps.load-variables.outputs.dgateway-executable }}
          CARGO_PACKAGE: ${{ steps.load-variables.outputs.cargo-package }}
        run: |
          ./ci/tlk.ps1 build -Platform ${{ matrix.os }} -Architecture ${{ matrix.arch }}

      - name: Build PowerShell module
        if: matrix.os == 'windows'
        env:
          PSMODULE_OUTPUT_PATH: ${{ steps.load-variables.outputs.psmodule-output-path }}
        run: .\powershell\build.ps1

      - name: Package
        shell: pwsh
        env:
          TARGET_OUTPUT_PATH: ${{ steps.load-variables.outputs.target-output-path }}
          DGATEWAY_EXECUTABLE: ${{ steps.load-variables.outputs.dgateway-executable }}
        run: |
          if ($Env:RUNNER_OS -eq "Windows") {
            $Env:DGATEWAY_PACKAGE = "${{ steps.load-variables.outputs.dgateway-package }}"
            $Env:DGATEWAY_PSMODULE_PATH = "${{ steps.load-variables.outputs.dgateway-psmodule-output-path }}"
            $Env:DGATEWAY_PSMODULE_CLEAN = "1"
          }

          ./ci/tlk.ps1 package -Platform ${{ matrix.os }} -Architecture ${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: devolutions-gateway
          path: ${{ steps.load-variables.outputs.staging-path }}

  # TODO: code sign (and notarize?) jetsocat on macOS
  codesign:
    runs-on: windows-2019
    environment: build-and-publish
    needs: [jetsocat, devolutions-gateway]
    if: ${{ github.ref == 'refs/heads/master' }}

    steps:
      - name: Configure certificates
        env:
          CODE_SIGN_CERT: ${{ secrets.WINDOWS_CODE_SIGNING_CERTIFICATE }}
          CODE_SIGN_CERT_PASSWORD: ${{ secrets.WINDOWS_CODE_SIGNING_PASSWORD }}
        run: |
          $CertificatePath = Join-Path -Path $Env:RUNNER_TEMP -ChildPath CodeSigningCertificate.pfx
          [IO.File]::WriteAllBytes($CertificatePath, ([Convert]::FromBase64String($Env:CODE_SIGN_CERT)))
          $SecurePassword = ConvertTo-SecureString "$Env:CODE_SIGN_CERT_PASSWORD" -AsPlainText -Force
          Import-PfxCertificate -FilePath "$CertificatePath" -CertStoreLocation Cert:\CurrentUser\My -Password $SecurePassword

      - name: Configure runner
        run: |
          echo "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: download artifacts
        id: download
        uses: actions/download-artifact@v2

      - name: Sign executables
        run: |
          Get-ChildItem -Path devolutions-gateway -Recurse -Include "*.exe", "*.msi" | % { 
            Write-Host "Signing $_.FullName"
            $SignCmd = $(@(
              'signtool', 
              'sign', 
              '/fd', 'SHA256', 
              '/v', 
              '/n', 'Devolutions', 
              '/tr', 'http://timestamp.comodoca.com/?td=sha256',
              '/td', 'sha256',
              $_.FullName
            )) -Join ' '

            Invoke-Expression $SignCmd
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: devolutions-gateway
          path: devolutions-gateway

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jetsocat
          path: jetsocat

  containers:
    name: containers [${{ matrix.os }} ${{ matrix.arch }}]
    runs-on: ${{ matrix.runner }}
    environment: build-and-publish
    needs: [preflight, codesign]
    if: ${{ github.ref == 'refs/heads/master' }}
    strategy:
      fail-fast: true
      matrix:
        arch: [ x86_64 ]
        os: [ windows, linux ]
        base-image: [buster, servercore-ltsc2019, nanoserver-1809 ]

        include:
          - os: windows
            runner: windows-2019
          - os: linux
            runner: ubuntu-18.04
        exclude:
          - os: windows
            base-image: buster
          - os: linux
            base-image: servercore-ltsc2019
          - os: linux
            base-image: nanoserver-1809

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: devolutions-gateway

      # Copy the built and signed Devolutions Gateway binary into the packaging location
      - name: Move artifacts
        id: move-artifacts
        shell: pwsh
        run: |
          $PkgDir = Join-Path $pwd package $Env:RUNNER_OS # RUNNER_OS is camelcase
          echo "::set-output name=package-path::$PkgDir"
          
          $SourceFileName = "DevolutionsGateway_$($Env:RUNNER_OS)_${{ needs.preflight.outputs.version }}_${{ matrix.arch }}"

          if ($Env:RUNNER_OS -eq "Windows") {
            $SourceFileName = "$($SourceFileName).exe"
            $TargetFileName = "DevolutionsGateway.exe"
          } else { 
            $TargetFileName = "devolutions-gateway"
          }

          $SourcePath = Get-ChildItem -Recurse -Filter $SourceFileName -File -Path ${{ steps.download.outputs.download-path }}
          $TargetPath = Join-Path $PkgDir $TargetFileName
          Copy-Item $SourcePath $TargetPath

          if ($Env:RUNNER_OS -eq "Linux") {
            Invoke-Expression "chmod +x $TargetPath"
          }

      - name: Build container
        id: build-container
        shell: pwsh
        working-directory: ${{ steps.move-artifacts.outputs.package-path }}
        run: |
          $ImageName = "devolutions/devolutions-gateway:${{ needs.preflight.outputs.version }}-${{ matrix.base-image }}"
          if ("${{ matrix.base-image }}" -Eq "nanoserver-1809") {
            docker build --build-arg FROM_IMAGE=mcr.microsoft.com/windows/nanoserver:1809 -t "$ImageName" .
          } else {
            docker build -t "$ImageName" .
          }
          echo "::set-output name=image-name::$ImageName"

      - name: Push container
        shell: pwsh
        working-directory: ${{ steps.move-artifacts.outputs.package-path }}
        run: |
          echo ${{ secrets.DOCKER_HUB_BOT_PASSWORD }} | docker login -u devolutionsbot --password-stdin
          docker push ${{ steps.build-container.outputs.image-name }}

  github-release:
    runs-on: ubuntu-18.04
    environment: build-and-publish
    needs: [preflight, codesign]
    if: ${{ github.ref == 'refs/heads/master' }}

    steps:
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v2

      - name: Create GitHub release
        shell: pwsh
        run: |
          $Version = "${{ needs.preflight.outputs.version }}"
          $StagingPath = "${{ steps.download.outputs.download-path }}"
          $HashPath = Join-Path $StagingPath checksums
          $Files = Get-ChildItem -Path $StagingPath -Recurse -File | % { Get-FileHash -Algorithm SHA256 $_.FullName }
          $Files | % { "$($_.Hash)  $(Split-Path $_.Path -leaf)" } | Out-File -FilePath $HashPath -Append -Encoding ASCII

          $GhCmd = $(@('gh', 'release', 'create', "v$Version", $HashPath) + $Files.Path) -Join ' '
          Invoke-Expression @GhCmd

  psgallery-release:
    runs-on: ubuntu-18.04
    environment: build-and-publish
    needs: codesign
    if: ${{ github.ref == 'refs/heads/master' }}

    steps:
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: devolutions-gateway

      - name: Publish PowerShell module
        shell: pwsh
        run: |
          $StagingPath = "${{ steps.download.outputs.download-path }}"
          $Archive = Get-ChildItem -Recurse -Filter "*-ps-*.zip" -File -Path $StagingPath
          $Module = Join-Path $StagingPath PowerShell
          Expand-Archive -Path $Archive -DestinationPath $Module
          Publish-Module -Force -Path (Join-Path $Module DevolutionsGateway) -NugetApiKey "${{ secrets.PS_GALLERY_NUGET_API_KEY }}"