name: Release

on:
  workflow_dispatch:
    inputs:
      run:
        description: 'The Package workflow run to release'
        required: true
      dry-run:
        description: 'If true, the workflow only indicates which artifacts would be uploaded'
        required: true
        type: boolean
        default: 'true'

concurrency: gateway-release

jobs:
  preflight:
    name: Preflight
    runs-on: ubuntu-18.04
    outputs: 
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Get version
        id: get-version
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: |
          gh run download ${{ github.event.inputs.run }} -n version --repo $Env:GITHUB_REPOSITORY
          $Version = Get-Content VERSION -TotalCount 1
          echo "::set-output name=version::$Version"
          echo "::notice::Releasing artifacts for version ${{ steps.get-version.outputs.version }} from run ${{ github.event.inputs.run }}"

  containers:
    name: Containers [${{ matrix.os }} ${{ matrix.base-image }}]
    runs-on: ${{ matrix.runner }}
    environment: build-and-publish
    needs: [preflight]
    strategy:
      matrix:
        arch: [ x86_64 ]
        os: [ windows, linux ]
        base-image: [buster, servercore-ltsc2019, nanoserver-1809 ]

        include:
          - os: windows
            runner: windows-2019
          - os: linux
            runner: ubuntu-18.04
        exclude:
          - os: windows
            base-image: buster
          - os: linux
            base-image: servercore-ltsc2019
          - os: linux
            base-image: nanoserver-1809

    steps:
      - name: Download artifacts
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: gh run download ${{ github.event.inputs.run }} -n docker -n devolutions-gateway --repo $Env:GITHUB_REPOSITORY

      - name: Prepare artifacts
        id: prepare-artifacts
        shell: pwsh
        run: |
          $PkgDir = Join-Path docker $Env:RUNNER_OS # RUNNER_OS is camelcase
          echo "::set-output name=package-path::$PkgDir"
          
          $SourceFileName = "DevolutionsGateway_$($Env:RUNNER_OS)_${{ needs.preflight.outputs.version }}_${{ matrix.arch }}"

          if ($Env:RUNNER_OS -eq "Windows") {
            $SourceFileName = "$($SourceFileName).exe"
            $TargetFileName = "DevolutionsGateway.exe"
          } else { 
            $TargetFileName = "devolutions-gateway"
          }

          $SourcePath = Get-ChildItem -Recurse -Filter $SourceFileName -File -Path devolutions-gateway
          $TargetPath = Join-Path $PkgDir $TargetFileName
          Copy-Item $SourcePath $TargetPath

          if ($Env:RUNNER_OS -eq "Linux") {
            Invoke-Expression "chmod +x $TargetPath"
          }

      - name: Build container
        id: build-container
        shell: pwsh
        working-directory: ${{ steps.prepare-artifacts.outputs.package-path }}
        run: |
          $ImageName = "devolutions/devolutions-gateway:${{ needs.preflight.outputs.version }}-${{ matrix.base-image }}"
          if ("${{ matrix.base-image }}" -Eq "nanoserver-1809") {
            docker build --build-arg FROM_IMAGE=mcr.microsoft.com/windows/nanoserver:1809 -t "$ImageName" .
          } else {
            docker build -t "$ImageName" .
          }
          echo "::set-output name=image-name::$ImageName"
          Get-ChildItem -Recurse

      - name: Push container
        shell: pwsh
        working-directory: ${{ steps.prepare-artifacts.outputs.package-path }}
        run: |
          echo ${{ secrets.DOCKER_HUB_BOT_PASSWORD }} | docker login -u devolutionsbot --password-stdin
          $DockerPushCmd = 'docker push ${{ steps.build-container.outputs.image-name }}'
          Write-Host $DockerPushCmd
          if (-Not ([System.Convert]::ToBoolean('${{ github.event.inputs.dry-run }}'))) {
            Invoke-Expression $DockerPushCmd
          }

  github-release:
    name: GitHub release
    runs-on: ubuntu-18.04
    environment: build-and-publish
    needs: [preflight]

    steps:
      - name: Configure runner
        run: cargo install parse-changelog

      - name: Download artifacts
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: gh run download ${{ github.event.inputs.run }} -n jetsocat -n devolutions-gateway -n changelog --repo $Env:GITHUB_REPOSITORY

      - name: Create GitHub release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: |
          $Version = "${{ needs.preflight.outputs.version }}"
          $HashPath = 'checksums'
          $Files = Get-ChildItem -Recurse -File -Exclude 'CHANGELOG.md' | % { Get-FileHash -Algorithm SHA256 $_.FullName }
          $Files | % { "$($_.Hash)  $(Split-Path $_.Path -leaf)" } | Out-File -FilePath $HashPath -Append -Encoding ASCII

          echo "::group::checksums"
          Get-Content $HashPath
          echo "::endgroup::"

          $ChangesPath = 'changes'
          parse-changelog $(Join-Path changelog CHANGELOG.md) $Version | Out-File -Encoding UTF8NoBOM $ChangesPath

          echo "::group::changes"
          Get-Content $ChangesPath
          echo "::endgroup::"

          $GhCmd = $(@('gh', 'release', 'create', "v$Version", "--repo", $Env:GITHUB_REPOSITORY, "--notes-file", $ChangesPath, $HashPath) + $Files.Path) -Join ' '
          Write-Host $GhCmd
          if (-Not ([System.Convert]::ToBoolean('${{ github.event.inputs.dry-run }}'))) {
            Invoke-Expression $GhCmd
          }

  psgallery-release:
    name: PowerShell release
    runs-on: ubuntu-18.04
    environment: build-and-publish
    needs: preflight

    steps:
      - name: Download artifacts
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: gh run download ${{ github.event.inputs.run }} -n devolutions-gateway --repo $Env:GITHUB_REPOSITORY

      - name: Publish PowerShell module
        shell: pwsh
        run: |
          $Archive = Get-ChildItem -Recurse -Filter "*-ps-*.zip" -File
          Expand-Archive -Path $Archive -DestinationPath 'PowerShell'

          $PublishCmd = @('Publish-Module', '-Force', '-Path', (Join-Path PowerShell DevolutionsGateway), '-NugetApiKey', '${{ secrets.PS_GALLERY_NUGET_API_KEY }}')
          if ([System.Convert]::ToBoolean('${{ github.event.inputs.dry-run }}')) {
            $PublishCmd += '-WhatIf'
          }
          $PublishCmd = $PublishCmd -Join ' '
          Write-Host $PublishCmd

          try {
            Invoke-Expression $PublishCmd
          }
          catch {
            if ($_.Exception.Message -ilike "*cannot be published as the current version*is already available in the repository*") {
              echo "::warning::PowerShell module not published; this version is already listed on PSGallery"
            } else {
              Write-Error $_
              exit 1
            }
          }