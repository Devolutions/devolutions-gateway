name: Release

on:
  workflow_dispatch:
    inputs:
      run-id:
        description: 'The CI workflow run ID with the artifacts to release'
        required: true

concurrency: gateway-release

jobs:
  preflight:
    name: Preflight
    runs-on: ubuntu-18.04
    outputs: 
      commit: ${{ steps.get-commit.outputs.commit }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Get commit
        id: get-commit
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: |
          $RunJson = gh api /repos/devolutions/devolutions-gateway/actions/runs/${{ github.event.inputs.run-id }}
          $Run = $RunJson | ConvertFrom-Json
          echo "::set-output name=commit::$($Run.head_sha)"

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.get-commit.outputs.commit }}

      - name: Get version
        id: get-version
        shell: pwsh
        run: |
          $Version = Get-Content VERSION -TotalCount 1
          echo "::set-output name=version::$Version"

      - name: Print output
        shell: pwsh
        run: Write-Host Version ${{ steps.get-version.outputs.version }} - Run ${{ github.event.inputs.run-id }} - Commit ${{ steps.get-commit.outputs.commit }}

  # TODO: code sign (and notarize?) jetsocat on macOS
  codesign:
    name: Codesign
    runs-on: windows-2019
    environment: build-and-publish
    needs: preflight

    steps:
      - name: Configure certificates
        env:
          CODE_SIGN_CERT: ${{ secrets.WINDOWS_CODE_SIGNING_CERTIFICATE }}
          CODE_SIGN_CERT_PASSWORD: ${{ secrets.WINDOWS_CODE_SIGNING_PASSWORD }}
        run: |
          $CertificatePath = Join-Path -Path $Env:RUNNER_TEMP -ChildPath CodeSigningCertificate.pfx
          [IO.File]::WriteAllBytes($CertificatePath, ([Convert]::FromBase64String($Env:CODE_SIGN_CERT)))
          $SecurePassword = ConvertTo-SecureString "$Env:CODE_SIGN_CERT_PASSWORD" -AsPlainText -Force
          Import-PfxCertificate -FilePath "$CertificatePath" -CertStoreLocation Cert:\CurrentUser\My -Password $SecurePassword

      - name: Configure runner
        run: |
          echo "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Download artifacts
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: gh run download ${{ github.event.inputs.run-id }} --repo Devolutions/devolutions-gateway

      - name: Sign executables
        run: |
          Get-ChildItem -Path devolutions-gateway -Recurse -Include "*.exe", "*.msi" | % { 
            Write-Host "Signing $_.FullName"
            $SignCmd = $(@(
              'signtool', 
              'sign', 
              '/fd', 'SHA256', 
              '/v', 
              '/n', 'Devolutions', 
              '/tr', 'http://timestamp.comodoca.com/?td=sha256',
              '/td', 'sha256',
              $_.FullName
            )) -Join ' '

            Invoke-Expression $SignCmd
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: devolutions-gateway
          path: devolutions-gateway

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jetsocat
          path: jetsocat

  containers:
    name: Containers [${{ matrix.os }} ${{ matrix.base-image }}]
    runs-on: ${{ matrix.runner }}
    environment: build-and-publish
    needs: [preflight, codesign]
    strategy:
      fail-fast: true
      matrix:
        arch: [ x86_64 ]
        os: [ windows, linux ]
        base-image: [buster, servercore-ltsc2019, nanoserver-1809 ]

        include:
          - os: windows
            runner: windows-2019
          - os: linux
            runner: ubuntu-18.04
        exclude:
          - os: windows
            base-image: buster
          - os: linux
            base-image: servercore-ltsc2019
          - os: linux
            base-image: nanoserver-1809

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: devolutions-gateway

      # Copy the built and signed Devolutions Gateway binary into the packaging location
      - name: Move artifacts
        id: move-artifacts
        shell: pwsh
        run: |
          $PkgDir = Join-Path $pwd package $Env:RUNNER_OS # RUNNER_OS is camelcase
          echo "::set-output name=package-path::$PkgDir"
          
          $SourceFileName = "DevolutionsGateway_$($Env:RUNNER_OS)_${{ needs.preflight.outputs.version }}_${{ matrix.arch }}"

          if ($Env:RUNNER_OS -eq "Windows") {
            $SourceFileName = "$($SourceFileName).exe"
            $TargetFileName = "DevolutionsGateway.exe"
          } else { 
            $TargetFileName = "devolutions-gateway"
          }

          $SourcePath = Get-ChildItem -Recurse -Filter $SourceFileName -File -Path ${{ steps.download.outputs.download-path }}
          $TargetPath = Join-Path $PkgDir $TargetFileName
          Copy-Item $SourcePath $TargetPath

          if ($Env:RUNNER_OS -eq "Linux") {
            Invoke-Expression "chmod +x $TargetPath"
          }

      - name: Build container
        id: build-container
        shell: pwsh
        working-directory: ${{ steps.move-artifacts.outputs.package-path }}
        run: |
          $ImageName = "devolutions/devolutions-gateway:${{ needs.preflight.outputs.version }}-${{ matrix.base-image }}"
          if ("${{ matrix.base-image }}" -Eq "nanoserver-1809") {
            docker build --build-arg FROM_IMAGE=mcr.microsoft.com/windows/nanoserver:1809 -t "$ImageName" .
          } else {
            docker build -t "$ImageName" .
          }
          echo "::set-output name=image-name::$ImageName"

      - name: Push container
        shell: pwsh
        working-directory: ${{ steps.move-artifacts.outputs.package-path }}
        run: |
          echo ${{ secrets.DOCKER_HUB_BOT_PASSWORD }} | docker login -u devolutionsbot --password-stdin
          # docker push ${{ steps.build-container.outputs.image-name }}

  github-release:
    name: GitHub release
    runs-on: ubuntu-18.04
    environment: build-and-publish
    needs: [preflight, codesign]

    steps:
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v2

      - name: Create GitHub release
        shell: pwsh
        run: |
          $Version = "${{ needs.preflight.outputs.version }}"
          $StagingPath = "${{ steps.download.outputs.download-path }}"
          $HashPath = Join-Path $StagingPath checksums
          $Files = Get-ChildItem -Path $StagingPath -Recurse -File | % { Get-FileHash -Algorithm SHA256 $_.FullName }
          $Files | % { "$($_.Hash)  $(Split-Path $_.Path -leaf)" } | Out-File -FilePath $HashPath -Append -Encoding ASCII

          $GhCmd = $(@('gh', 'release', 'create', "v$Version", $HashPath) + $Files.Path) -Join ' '
          # Invoke-Expression @GhCmd

  psgallery-release:
    name: PowerShell release
    runs-on: ubuntu-18.04
    environment: build-and-publish
    needs: codesign

    steps:
      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: devolutions-gateway

      - name: Publish PowerShell module
        shell: pwsh
        run: |
          $StagingPath = "${{ steps.download.outputs.download-path }}"
          $Archive = Get-ChildItem -Recurse -Filter "*-ps-*.zip" -File -Path $StagingPath
          $Module = Join-Path $StagingPath PowerShell
          Expand-Archive -Path $Archive -DestinationPath $Module
          # Publish-Module -Force -Path (Join-Path $Module DevolutionsGateway) -NugetApiKey "${{ secrets.PS_GALLERY_NUGET_API_KEY }}"