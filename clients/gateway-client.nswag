{
  "runtime": "Net60",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "openapi: 3.0.3\r\ninfo:\r\n  title: devolutions-gateway\r\n  description: Protocol-aware fine-grained relay server\r\n  contact:\r\n    name: Devolutions Inc.\r\n    email: ''\r\n  license:\r\n    name: MIT/Apache-2.0\r\n  version: 2022.2.2\r\npaths:\r\n  /jet/config:\r\n    patch:\r\n      tags:\r\n      - crate::http::controllers::config\r\n      summary: Modifies configuration\r\n      description: |\r\n        Modifies configuration\r\n      operationId: PatchConfig\r\n      requestBody:\r\n        description: JSON-encoded configuration patch\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/ConfigPatch'\r\n        required: true\r\n      responses:\r\n        '200':\r\n          description: Configuration has been patched with success\r\n        '400':\r\n          description: Bad patch request\r\n        '401':\r\n          description: Invalid or missing authorization token\r\n        '403':\r\n          description: Insufficient permissions\r\n        '500':\r\n          description: Failed to patch configuration\r\n      deprecated: false\r\n      security:\r\n      - scope_token:\r\n        - gateway.config.write\r\n  /jet/diagnostics/clock:\r\n    get:\r\n      tags:\r\n      - crate::http::controllers::diagnostics\r\n      summary: Retrieves server's clock in order to diagnose clock drifting.\r\n      description: |\r\n        Retrieves server's clock in order to diagnose clock drifting.\r\n\r\n        Clock drift is an issue for token validation because of claims such as `nbf` and `exp`.\r\n      operationId: GetClock\r\n      responses:\r\n        '200':\r\n          description: Server's clock\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ClockDiagnostic'\r\n      deprecated: false\r\n  /jet/diagnostics/configuration:\r\n    get:\r\n      tags:\r\n      - crate::http::controllers::diagnostics\r\n      summary: Retrieves configuration.\r\n      description: |\r\n        Retrieves configuration.\r\n      operationId: GetConfiguration\r\n      responses:\r\n        '200':\r\n          description: Service configuration\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ConfigDiagnostic'\r\n        '400':\r\n          description: Bad request\r\n        '401':\r\n          description: Invalid or missing authorization token\r\n        '403':\r\n          description: Insufficient permissions\r\n      deprecated: false\r\n      security:\r\n      - scope_token:\r\n        - gateway.diagnostics.read\r\n  /jet/diagnostics/logs:\r\n    get:\r\n      tags:\r\n      - crate::http::controllers::diagnostics\r\n      summary: Retrieves latest logs.\r\n      description: |\r\n        Retrieves latest logs.\r\n      operationId: GetLogs\r\n      responses:\r\n        '200':\r\n          description: Latest logs\r\n          content:\r\n            text/plain:\r\n              schema:\r\n                type: string\r\n        '400':\r\n          description: Bad request\r\n        '401':\r\n          description: Invalid or missing authorization token\r\n        '403':\r\n          description: Insufficient permissions\r\n        '500':\r\n          description: Failed to retrieve logs\r\n      deprecated: false\r\n      security:\r\n      - scope_token:\r\n        - gateway.diagnostics.read\r\n  /jet/health:\r\n    get:\r\n      tags:\r\n      - crate::http::controllers::health\r\n      summary: Performs a health check\r\n      description: |\r\n        Performs a health check\r\n      operationId: GetHealth\r\n      responses:\r\n        '200':\r\n          description: Healthy message\r\n          content:\r\n            text/plain:\r\n              schema:\r\n                type: string\r\n      deprecated: false\r\n  /jet/sessions:\r\n    get:\r\n      tags:\r\n      - crate::http::controllers::sessions\r\n      summary: Lists running sessions\r\n      description: |\r\n        Lists running sessions\r\n      operationId: GetSessions\r\n      responses:\r\n        '200':\r\n          description: Running sessions\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/SessionInfo'\r\n        '400':\r\n          description: Bad request\r\n        '401':\r\n          description: Invalid or missing authorization token\r\n        '403':\r\n          description: Insufficient permissions\r\n      deprecated: false\r\n      security:\r\n      - scope_token:\r\n        - gateway.sessions.read\r\ncomponents:\r\n  schemas:\r\n    ClockDiagnostic:\r\n      type: object\r\n      required:\r\n      - timestamp_secs\r\n      - timestamp_millis\r\n      properties:\r\n        timestamp_millis:\r\n          type: integer\r\n          format: int64\r\n        timestamp_secs:\r\n          type: integer\r\n          format: int64\r\n    ConfigDiagnostic:\r\n      type: object\r\n      required:\r\n      - hostname\r\n      - version\r\n      - listeners\r\n      properties:\r\n        hostname:\r\n          type: string\r\n        id:\r\n          type: string\r\n          format: uuid\r\n        listeners:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/ListenerUrls'\r\n        version:\r\n          type: string\r\n    ConfigPatch:\r\n      type: object\r\n      properties:\r\n        Id:\r\n          type: string\r\n          format: uuid\r\n        SubProvisionerPublicKey:\r\n          $ref: '#/components/schemas/SubProvisionerKey'\r\n    ConnectionMode:\r\n      type: string\r\n      enum:\r\n      - rdv\r\n      - fwd\r\n    DataEncoding:\r\n      type: string\r\n      enum:\r\n      - Multibase\r\n      - Base64\r\n      - Base64Pad\r\n      - Base64Url\r\n      - Base64UrlPad\r\n    ListenerUrls:\r\n      type: object\r\n      required:\r\n      - internal_url\r\n      - external_url\r\n      properties:\r\n        external_url:\r\n          type: string\r\n        internal_url:\r\n          type: string\r\n    PubKeyFormat:\r\n      type: string\r\n      enum:\r\n      - Spki\r\n      - Rsa\r\n    SessionInfo:\r\n      type: object\r\n      required:\r\n      - association_id\r\n      - application_protocol\r\n      - recording_policy\r\n      - filtering_policy\r\n      - start_timestamp\r\n      - connection_mode\r\n      properties:\r\n        application_protocol:\r\n          type: string\r\n        association_id:\r\n          type: string\r\n          format: uuid\r\n        connection_mode:\r\n          $ref: '#/components/schemas/ConnectionMode'\r\n        destination_host:\r\n          type: string\r\n        filtering_policy:\r\n          type: boolean\r\n        recording_policy:\r\n          type: boolean\r\n        start_timestamp:\r\n          type: string\r\n          format: date-time\r\n    SubProvisionerKey:\r\n      type: object\r\n      required:\r\n      - Id\r\n      - Value\r\n      properties:\r\n        Encoding:\r\n          $ref: '#/components/schemas/DataEncoding'\r\n        Format:\r\n          $ref: '#/components/schemas/PubKeyFormat'\r\n        Id:\r\n          type: string\r\n        Value:\r\n          type: string\r\n\r\n",
      "url": "http://redocly.github.io/redoc/openapi.yaml",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToTypeScriptClient": {
      "className": "{controller}Client",
      "moduleName": "",
      "namespace": "",
      "typeScriptVersion": 2.7,
      "template": "Angular",
      "promiseType": "Promise",
      "httpClass": "HttpClient",
      "withCredentials": false,
      "useSingletonProvider": true,
      "injectionTokenType": "InjectionToken",
      "rxJsVersion": 6.0,
      "dateTimeType": "Date",
      "nullValue": "Undefined",
      "generateClientClasses": true,
      "generateClientInterfaces": false,
      "generateOptionalParameters": true,
      "exportTypes": true,
      "wrapDtoExceptions": false,
      "exceptionClass": "ApiException",
      "clientBaseClass": null,
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "protectedMethods": [],
      "configurationClass": null,
      "useTransformOptionsMethod": false,
      "useTransformResultMethod": false,
      "generateDtoTypes": true,
      "operationGenerationMode": "SingleClientFromOperationId",
      "markOptionalProperties": true,
      "generateCloneMethod": true,
      "typeStyle": "Class",
      "enumStyle": "Enum",
      "useLeafType": false,
      "classTypes": [],
      "extendedClasses": [],
      "extensionCode": null,
      "generateDefaultValues": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateTypeCheckFunctions": false,
      "generateConstructorInterface": true,
      "convertConstructorInterfaceData": true,
      "importRequiredTypes": true,
      "useGetBaseUrlMethod": false,
      "baseUrlTokenName": "API_BASE_URL",
      "queryNullValue": "",
      "useAbortSignal": false,
      "inlineNamedDictionaries": false,
      "inlineNamedAny": false,
      "includeHttpContext": false,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "ts/gateway.generated.ts",
      "newLineBehavior": "Auto"
    },
    "openApiToCSharpClient": {
      "clientBaseClass": null,
      "configurationClass": null,
      "generateClientClasses": true,
      "generateClientInterfaces": true,
      "clientBaseInterface": null,
      "injectHttpClient": true,
      "disposeHttpClient": true,
      "protectedMethods": [],
      "generateExceptionClasses": true,
      "exceptionClass": "ApiException",
      "wrapDtoExceptions": true,
      "useHttpClientCreationMethod": false,
      "httpClientType": "System.Net.Http.HttpClient",
      "useHttpRequestMessageCreationMethod": false,
      "useBaseUrl": true,
      "generateBaseUrlProperty": true,
      "generateSyncMethods": true,
      "generatePrepareRequestAndProcessResponseAsAsyncMethods": false,
      "exposeJsonSerializerSettings": true,
      "clientClassAccessModifier": "public",
      "typeAccessModifier": "public",
      "generateContractsOutput": false,
      "contractsNamespace": null,
      "contractsOutputFilePath": null,
      "parameterDateTimeFormat": "s",
      "parameterDateFormat": "yyyy-MM-dd",
      "generateUpdateJsonSerializerSettingsMethod": true,
      "useRequestAndResponseSerializationSettings": false,
      "serializeTypeInformation": false,
      "queryNullValue": "",
      "className": "{controller}GatewayClient",
      "operationGenerationMode": "SingleClientFromOperationId",
      "additionalNamespaceUsages": [],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": true,
      "generateJsonMethods": false,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "Devolutions.Gateway.Clients",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTime",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTime",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.ICollection",
      "arrayInstanceType": "System.Collections.ObjectModel.Collection",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "jsonLibrary": "NewtonsoftJson",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": false,
      "generateNullableReferenceTypes": false,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "dotnet/Devolutions.Gateway.Clients/GatewayClient.cs",
      "newLineBehavior": "Auto"
    }
  }
}