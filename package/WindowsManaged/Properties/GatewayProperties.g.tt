<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ServiceProcess" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ServiceProcess" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#@ output extension=".cs" #>

using StoreLocation = System.Security.Cryptography.X509Certificates.StoreLocation;
using StoreName = System.Security.Cryptography.X509Certificates.StoreName;
using ServiceStartMode = System.ServiceProcess.ServiceStartMode;
using System;

namespace DevolutionsGateway.Properties
{
    /// <summary>
    /// do not modify the contents of this class with the code editor.
    /// </summary>
    internal partial class GatewayProperties
    {
<# for (int idx = 0; idx < this.properties.GetLength(0); idx++) { #> 
        internal static readonly WixProperty<<#= this.properties[idx].TypeName #>> <#= this.properties[idx].PrivateName #> = new()
        {
<# string id = string.IsNullOrEmpty(this.properties[idx].Id) ? this.properties[idx].Name : this.properties[idx].Id; #>
<# if (this.properties[idx].Public) { id = id.ToUpper(); } #>
            Id = "P.<#=id#>",
<# if (this.properties[idx].PropType == typeof(string) && this.properties[idx].DefaultValue != "string.Empty" && !this.properties[idx].DefaultValue.StartsWith("Constants.")) { #>
            Default = "<#= this.properties[idx].DefaultValue #>",
<# } else { #>
            Default = <#= this.properties[idx].DefaultValue #>,
<# } #>
            Secure = <#= this.properties[idx].Secure.ToString().ToLower() #>,
            Hidden = <#= this.properties[idx].Hidden.ToString().ToLower() #>,
            Public = <#= this.properties[idx].Public.ToString().ToLower() #>,
<# string summary = string.IsNullOrEmpty(this.properties[idx].Summary) ? this.properties[idx].Name : this.properties[idx].Summary; #>
            Summary = "<#= summary #>",
        };

<# if (!string.IsNullOrEmpty(this.properties[idx].Comment)) { #>
        /// <summary><#= this.properties[idx].Comment #></summary>
<# } #>
        public <#= this.properties[idx].TypeName #> <#= this.properties[idx].Name #>
        {
            get
            {
                string stringValue = this.FnGetPropValue(<#= this.properties[idx].PrivateName #>.Id);
                return WixProperties.GetPropertyValue<<#= this.properties[idx].TypeName #>>(stringValue);
            }
            set 
            { 
                if (this.runtimeSession is not null)
                {
                    this.runtimeSession.Set(<#= this.properties[idx].PrivateName #>, value); 
                }
            }
        }
<# } #> 

        public static IWixProperty[] Properties =
        {
<# for (int idx = 0; idx < this.properties.GetLength(0); idx++) { #> 
            <#= this.properties[idx].PrivateName #>,
<# } #> 
        };
    }
}

<#+
  public class PropertyDefinition
  {
    public Type PropType { get; set; }
    public string Name { get; set; }
    public string DefaultValue { get; set; }
    public bool Public { get; set; }
    public bool Secure { get; set; }
    public bool Hidden { get; set; }
    public string Id { get; set; }
    public string Comment { get; set; }
    public bool Private => !this.Public;
    public string Summary { get; set; } 

    public PropertyDefinition(Type propType, string name, string defaultValue, bool isPublic = true, bool secure = true, bool hidden = false, string id = null, string comment = null, string summary = null)
    {
        this.PropType = propType;
        this.Name = name;
        this.DefaultValue = defaultValue;
        this.Public = isPublic;
        this.Secure = secure;
        this.Hidden = hidden;
        this.Id = id;
        this.Comment = comment;
        this.Summary = summary;
    }

    public string PrivateName => char.ToLower(this.Name[0]) + this.Name.Substring(1);

    public virtual string TypeName => this.PropType.ToString();
  }

  public class EnumPropertyDefinition : PropertyDefinition
  {
    private string PropTypeString { get; set; }

    public EnumPropertyDefinition(string propType, string name, string defaultValue, bool isPublic = true, bool secure = true, bool hidden = false, string id = null, string comment = null, string summary = null) : base(typeof(string), name, defaultValue, isPublic, secure, hidden, id, comment, summary)
    {
        this.PropTypeString = propType;
    }

    public override string TypeName => this.PropTypeString;
  }

  PropertyDefinition[] properties = {
    new PropertyDefinition(typeof(string), "AccessUriHost", "string.Empty"),
    new PropertyDefinition(typeof(uint), "AccessUriPort", "443"),
    new PropertyDefinition(typeof(string), "AccessUriScheme", "Constants.HttpsProtocol"),
    new EnumPropertyDefinition("Constants.CertificateMode", "CertificateMode", "Constants.CertificateMode.External", summary: "Certificate Origin"),

    // External certificate mode
    new PropertyDefinition(typeof(string), "CertificateFile", "string.Empty", summary: "Certificate File"),
    new PropertyDefinition(typeof(string), "CertificatePassword", "string.Empty", hidden: true, summary: "Certificate Password"),
    new PropertyDefinition(typeof(string), "CertificatePrivateKeyFile", "string.Empty", summary: "Certificate Private Key File"),

    // System certificate mode
    new PropertyDefinition(typeof(StoreLocation), "CertificateLocation", "StoreLocation.CurrentUser", summary: "Certificate Location"),
    new PropertyDefinition(typeof(StoreName), "CertificateStore", "StoreName.My", summary: "Certificate Store"),
    new PropertyDefinition(typeof(string), "CertificateName", "string.Empty", summary: "Certificate Name"),
    new PropertyDefinition(typeof(bool), "GenerateCertificate", "false"),

    // UI Helpers
    new EnumPropertyDefinition("Constants.CertificateFindType", "CertificateFindType", "Constants.CertificateFindType.Thumbprint", isPublic: false, secure: false),
    new PropertyDefinition(typeof(string), "CertificateSearchText", "string.Empty", isPublic: false, hidden: true, secure: false),
    new PropertyDefinition(typeof(string), "CertificateThumbprint", "string.Empty", isPublic: false, hidden: true, secure: false),

    new PropertyDefinition(typeof(bool), "ConfigureGateway", "false", secure: false, comment: "`true` to configure the Gateway interactively"),    
    new PropertyDefinition(typeof(bool), "HasPowerShell", "false", isPublic: false, secure: false),

    new PropertyDefinition(typeof(string), "HttpListenerHost", "0.0.0.0"),
    new PropertyDefinition(typeof(uint), "HttpListenerPort", "7171"),
    new PropertyDefinition(typeof(string), "HttpListenerScheme", "Constants.HttpsProtocol"),

    new PropertyDefinition(typeof(string), "PublicKeyFile", "string.Empty", summary: "Public Key File"),
    new PropertyDefinition(typeof(string), "PrivateKeyFile","string.Empty", summary: "Private Key File"),
    new PropertyDefinition(typeof(bool), "GenerateKeyPair", "false"),

    new PropertyDefinition(typeof(string), "PowerShellPath", "string.Empty", hidden: true, secure: false, isPublic: false),
    new PropertyDefinition(typeof(string), "NoStartService", "string.Empty", id: "dgw.no_start_service"),
    new PropertyDefinition(typeof(ServiceStartMode), "ServiceStart", "ServiceStartMode.Manual", summary: "Service Start Mode"),

    new PropertyDefinition(typeof(string), "TcpListenerHost", "0.0.0.0"),
    new PropertyDefinition(typeof(uint), "TcpListenerPort", "8181"),
    new PropertyDefinition(typeof(string), "TcpListenerScheme", "Constants.TcpProtocol"),

    new PropertyDefinition(typeof(bool), "ConfigureWebApp", "false", comment: "`true` to configure the standalone web application interactively"),
    new EnumPropertyDefinition("Constants.AuthenticationMode", "AuthenticationMode", "Constants.AuthenticationMode.None", summary: "Authentication Mode"),
    new PropertyDefinition(typeof(string), "WebUsername", "string.Empty", summary: "Default User"),
    new PropertyDefinition(typeof(string), "WebPassword", "string.Empty", hidden: true, summary: "Default Password"),

    new PropertyDefinition(typeof(bool), "ConfigureNgrok", "false", comment: "`true` to use ngrok for ingress listeners"),
    new PropertyDefinition(typeof(string), "NgrokAuthToken", "string.Empty", summary: "Authentication Token"),
    new PropertyDefinition(typeof(string), "NgrokHttpDomain", "string.Empty", summary: "Domain"),
    new PropertyDefinition(typeof(bool), "NgrokEnableTcp", "false", summary: "Native Client Access"),
    new PropertyDefinition(typeof(string), "NgrokRemoteAddress", "string.Empty", summary: "Remote Address"),

    new PropertyDefinition(typeof(bool), "DebugPowerShell", "false"),
    new PropertyDefinition(typeof(Guid), "InstallId", "Guid.Empty", isPublic: false, secure: false),
    new PropertyDefinition(typeof(uint), "NetFx45Version", "0", isPublic: false, secure: false),
    new PropertyDefinition(typeof(bool), "FirstInstall", "false", isPublic: false, secure: false),
    new PropertyDefinition(typeof(bool), "Upgrading", "false", isPublic: false, secure: false),
    new PropertyDefinition(typeof(bool), "RemovingForUpgrade", "false", isPublic: false, secure: false),
    new PropertyDefinition(typeof(bool), "Uninstalling", "false", isPublic: false, secure: false),
    new PropertyDefinition(typeof(bool), "Maintenance", "false", isPublic: false, secure: false),
  };             
#>
