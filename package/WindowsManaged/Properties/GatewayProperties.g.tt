<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using StoreLocation = System.Security.Cryptography.X509Certificates.StoreLocation;
using StoreName = System.Security.Cryptography.X509Certificates.StoreName;
using System;

namespace DevolutionsGateway.Properties
{
    internal partial class GatewayProperties
    {
<# for (int idx = 0; idx < this.properties.GetLength(0); idx++) { #> 
        internal static readonly WixProperty<<#= this.properties[idx,0] #>> _<#= this.properties[idx,1] #> = new()
        {
            Id = "P.<# if (string.IsNullOrEmpty(this.properties[idx, 5])) { #><#= this.properties[idx,1].ToUpper() #><# } else { #><#= this.properties[idx,5].ToUpper() #><# } #>",
<# if (this.properties[idx,0] == "string" && this.properties[idx,2] != "string.Empty" && !this.properties[idx,2].StartsWith("Constants.")) { #>
            Default = "<#= this.properties[idx,2] #>",
<# } else { #>
            Default = <#= this.properties[idx,2] #>,
<# } #>
            Secure = <#= this.properties[idx,3] #>,
            Hidden = <#= this.properties[idx,4] #>,
        };

<# if (this.properties[idx,6] != "") { #>
        /// <summary><#= this.properties[idx,6] #></summary>
<# } #>
        public <#= this.properties[idx,0] #> <#= this.properties[idx,1] #>
        {
            get
            {
                string stringValue = this.FnGetPropValue(_<#= this.properties[idx,1] #>.Id);
                return WixProperties.GetPropertyValue<<#= this.properties[idx,0] #>>(stringValue);
            }
            set 
            { 
                if (this.runtimeSession is not null)
                {
                    this.runtimeSession.Set(_<#= this.properties[idx,1] #>, value); 
                }
            }
        }
<# } #> 

        public static IWixProperty[] Properties =
        {
<# for (int idx = 0; idx < this.properties.GetLength(0); idx++) { #> 
            _<#= this.properties[idx,1] #>,
<# } #> 
        };
    }
}

<#+      
  string[,] properties = {     
    // type name default secure hidden id comment

    {"string", "AccessUriHost", "string.Empty", "true", "false", "", ""},
    {"uint", "AccessUriPort", "443", "true", "false", "", ""},
    {"string", "AccessUriScheme", "Constants.HttpsProtocol", "true", "false", "", ""},

    {"Constants.CertificateMode", "CertificateMode", "Constants.CertificateMode.External", "true", "false", "", ""},
    // External certificate mode
    {"string", "CertificateFile", "string.Empty", "true", "false", "", ""},
    {"string", "CertificatePassword", "string.Empty", "true", "true", "", ""},
    {"string", "CertificatePrivateKeyFile", "string.Empty", "true", "false", "", ""},
    // System certificate mode
    {"StoreLocation", "CertificateLocation", "StoreLocation.CurrentUser", "true", "false", "", ""},
    {"StoreName", "CertificateStore", "StoreName.My", "true", "true", "", ""},
    {"string", "CertificateName", "string.Empty", "true", "false", "", ""},
    {"bool", "GenerateCertificate", "false", "true", "false", "", ""},
    // UI Helpers
    {"Constants.CertificateFindType", "CertificateFindType", "Constants.CertificateFindType.Thumbprint", "false", "false", "", ""},
    {"string", "CertificateSearchText", "string.Empty", "true", "false", "", ""},
    {"string", "CertificateThumbprint", "string.Empty", "true", "false", "", ""},

    {"bool", "ConfigureGateway", "false", "false", "false", "", "`true` to configure the Gateway interactively"},    
    {"bool", "HasPowerShell", "false", "false", "false", "", ""},

    {"string", "HttpListenerHost", "0.0.0.0", "true", "false", "", ""},
    {"uint", "HttpListenerPort", "7171", "true", "false", "", ""},
    {"string", "HttpListenerScheme", "Constants.HttpsProtocol", "true", "false", "", ""},

    {"string", "PublicKeyFile", "string.Empty", "true", "false", "", ""},
    {"string", "PrivateKeyFile", "string.Empty", "true", "false", "", ""},
    {"bool", "GenerateKeyPair", "false", "true", "false", "", ""},

    {"string", "PowerShellPath", "string.Empty", "true", "false", "", ""},
    {"string", "NoStartService", "string.Empty", "true", "false", "dgw.no_start_service", ""},
    {"int", "ServiceStart", "3", "true", "false", "", ""},

    {"string", "TcpListenerHost", "0.0.0.0", "true", "false", "", ""},
    {"uint", "TcpListenerPort", "8181", "true", "false", "", ""},
    {"string", "TcpListenerScheme", "Constants.TcpProtocol", "true", "false", "", ""},

    {"bool", "ConfigureWebApp", "false", "true", "false", "", "`true` to configure the standalone web application interactively"},
    {"Constants.AuthenticationMode", "AuthenticationMode", "Constants.AuthenticationMode.None", "true", "true", "", ""},
    {"string", "WebUsername", "string.Empty", "true", "false", "", ""},
    {"string", "WebPassword", "string.Empty", "true", "true", "", ""},

    {"bool", "ConfigureNgrok", "false", "true", "false", "", "`true` to use ngrok for ingress listeners"},
    {"string", "NgrokAuthToken", "string.Empty", "true", "false", "", ""},
    {"string", "NgrokHttpDomain", "string.Empty", "true", "false", "", ""},
    {"bool", "NgrokEnableTcp", "false", "true", "false", "", ""},
    {"string", "NgrokRemoteAddress", "string.Empty", "true", "false", "", ""},

    {"bool", "DebugPowerShell", "false", "true", "false", "", ""},
    {"Guid", "InstallId", "Guid.Empty", "true", "false", "", ""},
    {"uint", "NetFx45Version", "0", "false", "false", "", ""},
    {"bool", "FirstInstall", "false", "true", "false", "", ""},
    {"bool", "Upgrading", "false", "true", "false", "", ""},
    {"bool", "RemovingForUpgrade", "false", "true", "false", "", ""},
    {"bool", "Uninstalling", "false", "true", "false", "", ""},
    {"bool", "Maintenance", "false", "true", "false", "", ""},
  };               
#>
