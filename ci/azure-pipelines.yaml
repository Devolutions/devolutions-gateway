name: devolutions-gateway-$(Rev:rr)

trigger:
  branches:
    include:
      - master

variables:
  - group: wayknow
  - name: openssl_version
    value: 1.1.1b-5

stages:
  - stage: jetsocat
    jobs:
      - job: Linux_x86_64
        pool:
          name: 'Devolutions - Linux containers'

        workspace:
          clean: all

        container: devolutions/waykbuilder:linux

        variables:
          TargetPlatform: "linux"
          TargetArchitecture: "x86_64"

        steps:
          - checkout: self
            clean: true
            fetchDepth: 1

          - script: |
              VERSION=`cat $(Build.Repository.LocalPath)/VERSION`
              cargo build --release --package jetsocat
              strip -s target/release/jetsocat
              mkdir -p $(Build.StagingDirectory)/linux/x86_64
              cp target/release/jetsocat $(Build.StagingDirectory)/linux/x86_64/jetsocat_linux_${VERSION}_x86_64
            displayName: Building jetsocat

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.StagingDirectory)
              artifactName: jetsocat

      - job: Windows_x86_64
        pool:
          name: 'Devolutions - Windows containers'

        workspace:
          clean: all

        container: devolutions/waykbuilder:vstools2k19

        variables:
          TargetPlatform: "windows"
          TargetArchitecture: "x86_64"

        steps:
          - checkout: self
            clean: true
            fetchDepth: 1

          - task: DownloadSecureFile@1
            inputs:
              secureFile: CodeSigningCertificateUnsecure.pfx

          - task: CopyFiles@1
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              targetFolder: $(Build.Repository.LocalPath)
              contents: 'CodeSigningCertificateUnsecure.pfx'

          - powershell: |
              $secureString = ConvertTo-SecureString "$(WINDOWS_SIGNING_PASSPHRASE)" -AsPlainText -Force
              Import-PfxCertificate -FilePath CodeSigningCertificateUnsecure.pfx -CertStoreLocation Cert:\LocalMachine\My -Password $secureString
              Import-PfxCertificate -FilePath CodeSigningCertificateUnsecure.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $secureString
            displayName: Import signing certificate

          - powershell: |
              $version = Get-Content "$(Build.Repository.LocalPath)\VERSION"
              cargo build --release --package jetsocat
              mkdir $(Build.StagingDirectory)/windows/x86_64
              cp target/release/jetsocat.exe $(Build.StagingDirectory)/windows/x86_64/jetsocat_windows_"$version"_x86_64.exe
            displayName: Building jetsocat
            env:
              RUSTFLAGS: '-C target-feature=+crt-static'

          - powershell: |
              $version = Get-Content "$(Build.Repository.LocalPath)\VERSION"
              signtool sign /fd SHA256 /v /t http://timestamp.verisign.com/scripts/timstamp.dll $(Build.StagingDirectory)/windows/x86_64/jetsocat_windows_"$version"_x86_64.exe
            displayName: Signing binary

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.StagingDirectory)
              artifactName: jetsocat

      - job: Windows_x86
        pool:
          name: 'Devolutions - Windows containers'

        workspace:
          clean: all

        container: devolutions/waykbuilder:vstools2k19

        variables:
          TargetPlatform: "windows"
          TargetArchitecture: "x86"

        steps:
          - checkout: self
            clean: true
            fetchDepth: 1

          - task: DownloadSecureFile@1
            inputs:
              secureFile: CodeSigningCertificateUnsecure.pfx

          - task: CopyFiles@1
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              targetFolder: $(Build.Repository.LocalPath)
              contents: 'CodeSigningCertificateUnsecure.pfx'

          - powershell: |
              $secureString = ConvertTo-SecureString "$(WINDOWS_SIGNING_PASSPHRASE)" -AsPlainText -Force
              Import-PfxCertificate -FilePath CodeSigningCertificateUnsecure.pfx -CertStoreLocation Cert:\LocalMachine\My -Password $secureString
              Import-PfxCertificate -FilePath CodeSigningCertificateUnsecure.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $secureString
            displayName: Import signing certificate

          - powershell: |
              $version = Get-Content "$(Build.Repository.LocalPath)\VERSION"
              cargo build --release --target=i686-pc-windows-msvc --package jetsocat
              mkdir $(Build.StagingDirectory)/windows/x86
              cp target/i686-pc-windows-msvc/release/jetsocat.exe $(Build.StagingDirectory)/windows/x86/jetsocat_windows_"$version"_x86.exe
            displayName: Building jetsocat
            env:
              RUSTFLAGS: '-C target-feature=+crt-static'

          - powershell: |
              $version = Get-Content "$(Build.Repository.LocalPath)\VERSION"
              signtool sign /fd SHA256 /v /t http://timestamp.verisign.com/scripts/timstamp.dll $(Build.StagingDirectory)/windows/x86/jetsocat_windows_"$version"_x86.exe
            displayName: Signing binary

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.StagingDirectory)
              artifactName: jetsocat

      - job: Macos_x86_64
        pool:
          name: 'Devolutions - macOS'

        workspace:
          clean: all

        variables:
          TargetPlatform: "macos"
          TargetArchitecture: "x86_64"

        steps:
          - checkout: self
            clean: true
            fetchDepth: 1

          - script: |
              VERSION=`cat $(Build.Repository.LocalPath)/VERSION`
              cargo build --release --package jetsocat
              strip target/release/jetsocat
              mkdir -p $(Build.StagingDirectory)/macos/x86_64
              cp target/release/jetsocat $(Build.StagingDirectory)/macos/x86_64/jetsocat_macos_${VERSION}_x86_64
            displayName: Building jetsocat

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.StagingDirectory)
              artifactName: jetsocat

  - stage: 'Devolutions_Gateway'
    jobs:
      - job: Linux_64_bit
        pool:
          name: 'Devolutions - Linux containers'

        workspace:
          clean: all

        container: devolutions/waykbuilder:linux

        variables:
          TargetPlatform: "linux"
          TargetArchitecture: "x86_64"

        steps:
          - checkout: self
            clean: true
            fetchDepth: 1

          - script: |
              VERSION=`cat $(Build.Repository.LocalPath)/VERSION`

              echo "Check formatting"
              cargo fmt --all -- --check
              if ! [ $? -eq 0 ] ; then
                  echo "Bad formatting, please run 'cargo +stable fmt --all'"
                  exit 1
              fi

              conan install openssl/$(OPENSSL_VERSION)@devolutions/stable -g virtualenv -pr linux-x86_64
              . activate.sh
              cargo build --release --package devolutions-gateway
              mkdir -p $(Build.StagingDirectory)/linux/x86_64
              cp $(Build.Repository.LocalPath)/target/release/devolutions-gateway $(Build.StagingDirectory)/linux/x86_64/devolutions-gateway_linux_${VERSION}_x86_64
            displayName: Building devolutions-gateway

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.StagingDirectory)
              artifactName: devolutions-gateway

      - job: Windows_64_bit
        pool:
          name: 'Devolutions - Windows containers'

        workspace:
          clean: all

        container: devolutions/waykbuilder:vstools2k19

        variables:
          TargetPlatform: "windows"
          TargetArchitecture: "x86_64"

        steps:
          - checkout: self
            clean: true
            fetchDepth: 1

          - task: DownloadSecureFile@1
            inputs:
              secureFile: CodeSigningCertificateUnsecure.pfx

          - task: CopyFiles@1
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              targetFolder: $(Build.Repository.LocalPath)
              contents: 'CodeSigningCertificateUnsecure.pfx'

          - powershell: |
              $secureString = ConvertTo-SecureString "$(WINDOWS_SIGNING_PASSPHRASE)" -AsPlainText -Force
              Import-PfxCertificate -FilePath CodeSigningCertificateUnsecure.pfx -CertStoreLocation Cert:\LocalMachine\My -Password $secureString
              Import-PfxCertificate -FilePath CodeSigningCertificateUnsecure.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $secureString
              Write-Host "##vso[task.setvariable variable=SignToolName]Devolutions"
            displayName: Import signing certificate

          - powershell: |
              $CargoVersion = Get-Content "$(Build.Repository.LocalPath)\VERSION"
              $TargetOutputPath = "$(Build.StagingDirectory)/$(TargetPlatform)/$(TargetArchitecture)"
              Write-Host "##vso[task.setvariable variable=CargoVersion]$CargoVersion"
              Write-Host "##vso[task.setvariable variable=TargetOutputPath]$TargetOutputPath"
              conan install openssl/$(OPENSSL_VERSION)@devolutions/stable -g virtualenv -pr $(TargetPlatform)-$(TargetArchitecture)
              .\activate.ps1
              cargo build --release --package devolutions-gateway
              mkdir $TargetOutputPath
              $DGatewayExecutable = "$TargetOutputPath/DevolutionsGateway_$(TargetPlatform)_${CargoVersion}_$(TargetArchitecture).exe"
              cp $(Build.Repository.LocalPath)/target/release/devolutions-gateway.exe $DGatewayExecutable
              Write-Host "##vso[task.setvariable variable=DGATEWAY_EXECUTABLE]$DGatewayExecutable"
            displayName: Building devolutions-gateway
            env:
              RUSTFLAGS: '-C target-feature=+crt-static'

          - powershell: |
              signtool sign /fd SHA256 /v /t http://timestamp.verisign.com/scripts/timstamp.dll $(DGATEWAY_EXECUTABLE)
            displayName: Signing binary

          - task: PowerShell@2
            inputs:
              targetType: 'filePath'
              filePath: $(System.DefaultWorkingDirectory)\ci\tlk.ps1
              arguments: package -Platform $(TargetPlatform) -Architecture $(TargetArchitecture)
            env:
              TARGET_OUTPUT_PATH: "$(TargetOutputPath)"
              DGATEWAY_EXECUTABLE: "$(DGATEWAY_EXECUTABLE)"
              DGATEWAY_PACKAGE_FILENAME: "DevolutionsGateway-$(TargetArchitecture)-$(CargoVersion).msi"
              SIGNTOOL_NAME: "$(SignToolName)"
            displayName: Creating MSI package

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.StagingDirectory)
              artifactName: devolutions-gateway
