param(
    [parameter(Mandatory = $true)]
    [ValidateSet('gateway', 'agent')]
    [string] $Product,
    [string] $OutputDir
)

Import-Module (Join-Path $PSScriptRoot 'Build')

# Assembles an MSI with language transforms and runs the WiX Toolset batch script generated by `New-GatewayMsi -Generate` or `New-AgentMsi -Generate`.
function New-AssembledMsi() {
    param(
        [parameter(Mandatory = $true)]
        [ValidateSet('gateway', 'agent')]
        [string] $Product,
        [string] $OutputDir
    )

    $prod = switch ($Product) {
        'gateway' { 'DevolutionsGateway' }
        'agent' { 'DevolutionsAgent' }
    }
    $managedDir = switch ($Product) {
        'gateway' { 'WindowsManaged' }
        'agent' { 'AgentWindowsManaged' }
    }

    Push-Location
    $repoDir = Split-Path -Parent $PSScriptRoot # currently in `ci`
    Set-Location (Join-Path $repoDir "package\$managedDir")

    # Build the base (en-US) MSI using the script generated by `New-GatewayMsi -Generate`.
    & ".\Release\Build_$prod.cmd"

    $baseMsi = ".\Release\$prod.msi"  # en-US

    # Build the French MSI.
    & ".\Release\fr-FR\Build_$prod.cmd"
    $transform = '.\Release\fr-FR.mst'
    # Generate a language transform.
    & 'torch.exe' $baseMsi ".\Release\fr-FR\$prod.msi" '-o' $transform | Out-Host
    # Embed the transform in the base MSI.
    & 'cscript.exe' '/nologo' "$repoDir\ci\WiSubStg.vbs" $baseMsi $transform '1036' | Out-Host
    # Set the complete language list on the base MSI.
    & 'cscript.exe' '/nologo' "$repoDir\ci\WiLangId.vbs" $baseMsi 'Package' '1033,1036' | Out-Host

    Copy-Item -Path $baseMsi -Destination $OutputDir -ErrorAction Stop
    Write-Output "Copied assembled MSI to $(Join-Path $OutputDir "$prod.msi")"
    Pop-Location
}

New-AssembledMsi $Product -OutputDir $OutputDir

