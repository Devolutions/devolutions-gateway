/* tslint:disable */
/* eslint-disable */
/**
 * devolutions-gateway
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2022.2.2
 * Contact: infos@devolutions.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataEncoding } from './DataEncoding';
import {
    DataEncodingFromJSON,
    DataEncodingFromJSONTyped,
    DataEncodingToJSON,
} from './DataEncoding';
import type { PubKeyFormat } from './PubKeyFormat';
import {
    PubKeyFormatFromJSON,
    PubKeyFormatFromJSONTyped,
    PubKeyFormatToJSON,
} from './PubKeyFormat';

/**
 * 
 * @export
 * @interface SubProvisionerKey
 */
export interface SubProvisionerKey {
    /**
     * 
     * @type {DataEncoding}
     * @memberof SubProvisionerKey
     */
    encoding?: DataEncoding;
    /**
     * 
     * @type {PubKeyFormat}
     * @memberof SubProvisionerKey
     */
    format?: PubKeyFormat;
    /**
     * 
     * @type {string}
     * @memberof SubProvisionerKey
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SubProvisionerKey
     */
    value: string;
}

/**
 * Check if a given object implements the SubProvisionerKey interface.
 */
export function instanceOfSubProvisionerKey(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function SubProvisionerKeyFromJSON(json: any): SubProvisionerKey {
    return SubProvisionerKeyFromJSONTyped(json, false);
}

export function SubProvisionerKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubProvisionerKey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'encoding': !exists(json, 'Encoding') ? undefined : DataEncodingFromJSON(json['Encoding']),
        'format': !exists(json, 'Format') ? undefined : PubKeyFormatFromJSON(json['Format']),
        'id': json['Id'],
        'value': json['Value'],
    };
}

export function SubProvisionerKeyToJSON(value?: SubProvisionerKey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Encoding': DataEncodingToJSON(value.encoding),
        'Format': PubKeyFormatToJSON(value.format),
        'Id': value.id,
        'Value': value.value,
    };
}

