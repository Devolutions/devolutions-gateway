/* tslint:disable */
/* eslint-disable */
/**
 * devolutions-gateway
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2022.2.2
 * Contact: infos@devolutions.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionMode } from './ConnectionMode';
import {
    ConnectionModeFromJSON,
    ConnectionModeFromJSONTyped,
    ConnectionModeToJSON,
} from './ConnectionMode';

/**
 * 
 * @export
 * @interface SessionInfo
 */
export interface SessionInfo {
    /**
     * 
     * @type {string}
     * @memberof SessionInfo
     */
    applicationProtocol: string;
    /**
     * 
     * @type {string}
     * @memberof SessionInfo
     */
    associationId: string;
    /**
     * 
     * @type {ConnectionMode}
     * @memberof SessionInfo
     */
    connectionMode: ConnectionMode;
    /**
     * 
     * @type {string}
     * @memberof SessionInfo
     */
    destinationHost?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SessionInfo
     */
    filteringPolicy: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SessionInfo
     */
    recordingPolicy: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SessionInfo
     */
    startTimestamp: Date;
}

/**
 * Check if a given object implements the SessionInfo interface.
 */
export function instanceOfSessionInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "applicationProtocol" in value;
    isInstance = isInstance && "associationId" in value;
    isInstance = isInstance && "connectionMode" in value;
    isInstance = isInstance && "filteringPolicy" in value;
    isInstance = isInstance && "recordingPolicy" in value;
    isInstance = isInstance && "startTimestamp" in value;

    return isInstance;
}

export function SessionInfoFromJSON(json: any): SessionInfo {
    return SessionInfoFromJSONTyped(json, false);
}

export function SessionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'applicationProtocol': json['application_protocol'],
        'associationId': json['association_id'],
        'connectionMode': ConnectionModeFromJSON(json['connection_mode']),
        'destinationHost': !exists(json, 'destination_host') ? undefined : json['destination_host'],
        'filteringPolicy': json['filtering_policy'],
        'recordingPolicy': json['recording_policy'],
        'startTimestamp': (new Date(json['start_timestamp'])),
    };
}

export function SessionInfoToJSON(value?: SessionInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'application_protocol': value.applicationProtocol,
        'association_id': value.associationId,
        'connection_mode': ConnectionModeToJSON(value.connectionMode),
        'destination_host': value.destinationHost,
        'filtering_policy': value.filteringPolicy,
        'recording_policy': value.recordingPolicy,
        'start_timestamp': (value.startTimestamp.toISOString()),
    };
}

