/* tslint:disable */
/* eslint-disable */
/**
 * devolutions-gateway
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2022.2.2
 * Contact: infos@devolutions.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfigPatch,
} from '../models';
import {
    ConfigPatchFromJSON,
    ConfigPatchToJSON,
} from '../models';

export interface PatchConfigRequest {
    configPatch: ConfigPatch;
}

/**
 * 
 */
export class ConfigApi extends runtime.BaseAPI {

    /**
     * Modifies configuration 
     * Modifies configuration
     */
    async patchConfigRaw(requestParameters: PatchConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.configPatch === null || requestParameters.configPatch === undefined) {
            throw new runtime.RequiredError('configPatch','Required parameter requestParameters.configPatch was null or undefined when calling patchConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("scope_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jet/config`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigPatchToJSON(requestParameters.configPatch),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Modifies configuration 
     * Modifies configuration
     */
    async patchConfig(requestParameters: PatchConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchConfigRaw(requestParameters, initOverrides);
    }

}
