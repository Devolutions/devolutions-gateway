/* tslint:disable */
/* eslint-disable */
/**
 * devolutions-gateway
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2022.2.2
 * Contact: infos@devolutions.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClockDiagnostic,
  ConfigDiagnostic,
} from '../models';
import {
    ClockDiagnosticFromJSON,
    ClockDiagnosticToJSON,
    ConfigDiagnosticFromJSON,
    ConfigDiagnosticToJSON,
} from '../models';

/**
 * 
 */
export class DiagnosticsApi extends runtime.BaseAPI {

    /**
     * Retrieves server\'s clock in order to diagnose clock drifting.  Clock drift is an issue for token validation because of claims such as `nbf` and `exp`. 
     * Retrieves server\'s clock in order to diagnose clock drifting.
     */
    async getClockDiagnosticRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClockDiagnostic>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jet/diagnostics/clock`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClockDiagnosticFromJSON(jsonValue));
    }

    /**
     * Retrieves server\'s clock in order to diagnose clock drifting.  Clock drift is an issue for token validation because of claims such as `nbf` and `exp`. 
     * Retrieves server\'s clock in order to diagnose clock drifting.
     */
    async getClockDiagnostic(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClockDiagnostic> {
        const response = await this.getClockDiagnosticRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves configuration. 
     * Retrieves configuration.
     */
    async getConfigurationDiagnosticRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigDiagnostic>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("scope_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jet/diagnostics/configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigDiagnosticFromJSON(jsonValue));
    }

    /**
     * Retrieves configuration. 
     * Retrieves configuration.
     */
    async getConfigurationDiagnostic(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigDiagnostic> {
        const response = await this.getConfigurationDiagnosticRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves latest logs. 
     * Retrieves latest logs.
     */
    async getLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("scope_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jet/diagnostics/logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Retrieves latest logs. 
     * Retrieves latest logs.
     */
    async getLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getLogsRaw(initOverrides);
        return await response.value();
    }

}
