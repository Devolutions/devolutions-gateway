/* tslint:disable */
/* eslint-disable */
/**
 * devolutions-gateway
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2022.2.2
 * Contact: infos@devolutions.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JrlInfo,
} from '../models';
import {
    JrlInfoFromJSON,
    JrlInfoToJSON,
} from '../models';

/**
 * 
 */
export class JrlApi extends runtime.BaseAPI {

    /**
     * Retrieves current JRL (Json Revocation List) info 
     * Retrieves current JRL (Json Revocation List) info
     */
    async getJrlInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JrlInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("scope_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jet/jrl/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JrlInfoFromJSON(jsonValue));
    }

    /**
     * Retrieves current JRL (Json Revocation List) info 
     * Retrieves current JRL (Json Revocation List) info
     */
    async getJrlInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JrlInfo> {
        const response = await this.getJrlInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates JRL (Json Revocation List) using a JRL token 
     * Updates JRL (Json Revocation List) using a JRL token
     */
    async updateJrlRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jrl_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jet/jrl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates JRL (Json Revocation List) using a JRL token 
     * Updates JRL (Json Revocation List) using a JRL token
     */
    async updateJrl(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateJrlRaw(initOverrides);
    }

}
