/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2025.2.3
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Gateway.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// MonitorDefinition
    /// </summary>
    [DataContract(Name = "MonitorDefinition")]
    public partial class MonitorDefinition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MonitorDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorDefinition" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="interval">interval (required).</param>
        /// <param name="port">port.</param>
        /// <param name="probe">probe (required).</param>
        /// <param name="timeout">timeout (required).</param>
        public MonitorDefinition(string address = default(string), string id = default(string), long interval = default(long), int? port = default(int?), MonitoringProbeType probe = default(MonitoringProbeType), long timeout = default(long))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for MonitorDefinition and cannot be null");
            }
            this.Address = address;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MonitorDefinition and cannot be null");
            }
            this.Id = id;
            this.Interval = interval;
            // to ensure "probe" is required (not null)
            if (probe == null)
            {
                throw new ArgumentNullException("probe is a required property for MonitorDefinition and cannot be null");
            }
            this.Probe = probe;
            this.Timeout = timeout;
            this.Port = port;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", IsRequired = true, EmitDefaultValue = true)]
        public long Interval { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = true)]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets Probe
        /// </summary>
        [DataMember(Name = "probe", IsRequired = true, EmitDefaultValue = true)]
        public MonitoringProbeType Probe { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "timeout", IsRequired = true, EmitDefaultValue = true)]
        public long Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonitorDefinition {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Probe: ").Append(Probe).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Interval (long) minimum
            if (this.Interval < (long)0)
            {
                yield return new ValidationResult("Invalid value for Interval, must be a value greater than or equal to 0.", new [] { "Interval" });
            }

            // Port (int?) minimum
            if (this.Port < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Port, must be a value greater than or equal to 0.", new [] { "Port" });
            }

            // Timeout (long) minimum
            if (this.Timeout < (long)0)
            {
                yield return new ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 0.", new [] { "Timeout" });
            }

            yield break;
        }
    }

}
