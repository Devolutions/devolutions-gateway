/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2025.2.3
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Gateway.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// TrafficEventResponse
    /// </summary>
    [DataContract(Name = "TrafficEventResponse")]
    public partial class TrafficEventResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", IsRequired = true, EmitDefaultValue = true)]
        public EventOutcomeResponse Outcome { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", IsRequired = true, EmitDefaultValue = true)]
        public TransportProtocolResponse Protocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrafficEventResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrafficEventResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrafficEventResponse" /> class.
        /// </summary>
        /// <param name="activeDurationMs">Total duration the traffic item was active (milliseconds) (required).</param>
        /// <param name="bytesRx">Total bytes received from the remote peer (required).</param>
        /// <param name="bytesTx">Total bytes transmitted to the remote peer (required).</param>
        /// <param name="connectAtMs">Timestamp when the connection attempt began (epoch milliseconds) (required).</param>
        /// <param name="disconnectAtMs">Timestamp when the traffic item was closed or connection failed (epoch milliseconds) (required).</param>
        /// <param name="outcome">outcome (required).</param>
        /// <param name="protocol">protocol (required).</param>
        /// <param name="sessionId">Unique identifier for the session/tunnel this traffic item belongs to (required).</param>
        /// <param name="targetHost">Original target host string before DNS resolution (required).</param>
        /// <param name="targetIp">Concrete target IP address after resolution (required).</param>
        /// <param name="targetPort">Target port number for the connection (required).</param>
        public TrafficEventResponse(long activeDurationMs = default(long), long bytesRx = default(long), long bytesTx = default(long), long connectAtMs = default(long), long disconnectAtMs = default(long), EventOutcomeResponse outcome = default(EventOutcomeResponse), TransportProtocolResponse protocol = default(TransportProtocolResponse), Guid sessionId = default(Guid), string targetHost = default(string), string targetIp = default(string), int targetPort = default(int))
        {
            this.ActiveDurationMs = activeDurationMs;
            this.BytesRx = bytesRx;
            this.BytesTx = bytesTx;
            this.ConnectAtMs = connectAtMs;
            this.DisconnectAtMs = disconnectAtMs;
            this.Outcome = outcome;
            this.Protocol = protocol;
            this.SessionId = sessionId;
            // to ensure "targetHost" is required (not null)
            if (targetHost == null)
            {
                throw new ArgumentNullException("targetHost is a required property for TrafficEventResponse and cannot be null");
            }
            this.TargetHost = targetHost;
            // to ensure "targetIp" is required (not null)
            if (targetIp == null)
            {
                throw new ArgumentNullException("targetIp is a required property for TrafficEventResponse and cannot be null");
            }
            this.TargetIp = targetIp;
            this.TargetPort = targetPort;
        }

        /// <summary>
        /// Total duration the traffic item was active (milliseconds)
        /// </summary>
        /// <value>Total duration the traffic item was active (milliseconds)</value>
        [DataMember(Name = "active_duration_ms", IsRequired = true, EmitDefaultValue = true)]
        public long ActiveDurationMs { get; set; }

        /// <summary>
        /// Total bytes received from the remote peer
        /// </summary>
        /// <value>Total bytes received from the remote peer</value>
        [DataMember(Name = "bytes_rx", IsRequired = true, EmitDefaultValue = true)]
        public long BytesRx { get; set; }

        /// <summary>
        /// Total bytes transmitted to the remote peer
        /// </summary>
        /// <value>Total bytes transmitted to the remote peer</value>
        [DataMember(Name = "bytes_tx", IsRequired = true, EmitDefaultValue = true)]
        public long BytesTx { get; set; }

        /// <summary>
        /// Timestamp when the connection attempt began (epoch milliseconds)
        /// </summary>
        /// <value>Timestamp when the connection attempt began (epoch milliseconds)</value>
        [DataMember(Name = "connect_at_ms", IsRequired = true, EmitDefaultValue = true)]
        public long ConnectAtMs { get; set; }

        /// <summary>
        /// Timestamp when the traffic item was closed or connection failed (epoch milliseconds)
        /// </summary>
        /// <value>Timestamp when the traffic item was closed or connection failed (epoch milliseconds)</value>
        [DataMember(Name = "disconnect_at_ms", IsRequired = true, EmitDefaultValue = true)]
        public long DisconnectAtMs { get; set; }

        /// <summary>
        /// Unique identifier for the session/tunnel this traffic item belongs to
        /// </summary>
        /// <value>Unique identifier for the session/tunnel this traffic item belongs to</value>
        [DataMember(Name = "session_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid SessionId { get; set; }

        /// <summary>
        /// Original target host string before DNS resolution
        /// </summary>
        /// <value>Original target host string before DNS resolution</value>
        [DataMember(Name = "target_host", IsRequired = true, EmitDefaultValue = true)]
        public string TargetHost { get; set; }

        /// <summary>
        /// Concrete target IP address after resolution
        /// </summary>
        /// <value>Concrete target IP address after resolution</value>
        [DataMember(Name = "target_ip", IsRequired = true, EmitDefaultValue = true)]
        public string TargetIp { get; set; }

        /// <summary>
        /// Target port number for the connection
        /// </summary>
        /// <value>Target port number for the connection</value>
        [DataMember(Name = "target_port", IsRequired = true, EmitDefaultValue = true)]
        public int TargetPort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrafficEventResponse {\n");
            sb.Append("  ActiveDurationMs: ").Append(ActiveDurationMs).Append("\n");
            sb.Append("  BytesRx: ").Append(BytesRx).Append("\n");
            sb.Append("  BytesTx: ").Append(BytesTx).Append("\n");
            sb.Append("  ConnectAtMs: ").Append(ConnectAtMs).Append("\n");
            sb.Append("  DisconnectAtMs: ").Append(DisconnectAtMs).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  TargetHost: ").Append(TargetHost).Append("\n");
            sb.Append("  TargetIp: ").Append(TargetIp).Append("\n");
            sb.Append("  TargetPort: ").Append(TargetPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BytesRx (long) minimum
            if (this.BytesRx < (long)0)
            {
                yield return new ValidationResult("Invalid value for BytesRx, must be a value greater than or equal to 0.", new [] { "BytesRx" });
            }

            // BytesTx (long) minimum
            if (this.BytesTx < (long)0)
            {
                yield return new ValidationResult("Invalid value for BytesTx, must be a value greater than or equal to 0.", new [] { "BytesTx" });
            }

            // TargetPort (int) minimum
            if (this.TargetPort < (int)0)
            {
                yield return new ValidationResult("Invalid value for TargetPort, must be a value greater than or equal to 0.", new [] { "TargetPort" });
            }

            yield break;
        }
    }

}
