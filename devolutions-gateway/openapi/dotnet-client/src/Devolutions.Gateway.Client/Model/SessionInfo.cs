/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2022.2.2
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// SessionInfo
    /// </summary>
    [DataContract(Name = "SessionInfo")]
    public partial class SessionInfo : IEquatable<SessionInfo>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ConnectionMode
        /// </summary>
        [DataMember(Name = "connection_mode", IsRequired = true, EmitDefaultValue = false)]
        public ConnectionMode ConnectionMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SessionInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionInfo" /> class.
        /// </summary>
        /// <param name="applicationProtocol">applicationProtocol (required).</param>
        /// <param name="associationId">associationId (required).</param>
        /// <param name="connectionMode">connectionMode (required).</param>
        /// <param name="destinationHost">destinationHost.</param>
        /// <param name="filteringPolicy">filteringPolicy (required).</param>
        /// <param name="recordingPolicy">recordingPolicy (required).</param>
        /// <param name="startTimestamp">startTimestamp (required).</param>
        public SessionInfo(string applicationProtocol = default(string), Guid associationId = default(Guid), ConnectionMode connectionMode = default(ConnectionMode), string destinationHost = default(string), bool filteringPolicy = default(bool), bool recordingPolicy = default(bool), DateTime startTimestamp = default(DateTime))
        {
            // to ensure "applicationProtocol" is required (not null)
            if (applicationProtocol == null)
            {
                throw new ArgumentNullException("applicationProtocol is a required property for SessionInfo and cannot be null");
            }
            this.ApplicationProtocol = applicationProtocol;
            this.AssociationId = associationId;
            this.ConnectionMode = connectionMode;
            this.FilteringPolicy = filteringPolicy;
            this.RecordingPolicy = recordingPolicy;
            this.StartTimestamp = startTimestamp;
            this.DestinationHost = destinationHost;
        }

        /// <summary>
        /// Gets or Sets ApplicationProtocol
        /// </summary>
        [DataMember(Name = "application_protocol", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationProtocol { get; set; }

        /// <summary>
        /// Gets or Sets AssociationId
        /// </summary>
        [DataMember(Name = "association_id", IsRequired = true, EmitDefaultValue = false)]
        public Guid AssociationId { get; set; }

        /// <summary>
        /// Gets or Sets DestinationHost
        /// </summary>
        [DataMember(Name = "destination_host", EmitDefaultValue = false)]
        public string DestinationHost { get; set; }

        /// <summary>
        /// Gets or Sets FilteringPolicy
        /// </summary>
        [DataMember(Name = "filtering_policy", IsRequired = true, EmitDefaultValue = true)]
        public bool FilteringPolicy { get; set; }

        /// <summary>
        /// Gets or Sets RecordingPolicy
        /// </summary>
        [DataMember(Name = "recording_policy", IsRequired = true, EmitDefaultValue = true)]
        public bool RecordingPolicy { get; set; }

        /// <summary>
        /// Gets or Sets StartTimestamp
        /// </summary>
        [DataMember(Name = "start_timestamp", IsRequired = true, EmitDefaultValue = false)]
        public DateTime StartTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionInfo {\n");
            sb.Append("  ApplicationProtocol: ").Append(ApplicationProtocol).Append("\n");
            sb.Append("  AssociationId: ").Append(AssociationId).Append("\n");
            sb.Append("  ConnectionMode: ").Append(ConnectionMode).Append("\n");
            sb.Append("  DestinationHost: ").Append(DestinationHost).Append("\n");
            sb.Append("  FilteringPolicy: ").Append(FilteringPolicy).Append("\n");
            sb.Append("  RecordingPolicy: ").Append(RecordingPolicy).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionInfo);
        }

        /// <summary>
        /// Returns true if SessionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationProtocol == input.ApplicationProtocol ||
                    (this.ApplicationProtocol != null &&
                    this.ApplicationProtocol.Equals(input.ApplicationProtocol))
                ) && 
                (
                    this.AssociationId == input.AssociationId ||
                    (this.AssociationId != null &&
                    this.AssociationId.Equals(input.AssociationId))
                ) && 
                (
                    this.ConnectionMode == input.ConnectionMode ||
                    this.ConnectionMode.Equals(input.ConnectionMode)
                ) && 
                (
                    this.DestinationHost == input.DestinationHost ||
                    (this.DestinationHost != null &&
                    this.DestinationHost.Equals(input.DestinationHost))
                ) && 
                (
                    this.FilteringPolicy == input.FilteringPolicy ||
                    this.FilteringPolicy.Equals(input.FilteringPolicy)
                ) && 
                (
                    this.RecordingPolicy == input.RecordingPolicy ||
                    this.RecordingPolicy.Equals(input.RecordingPolicy)
                ) && 
                (
                    this.StartTimestamp == input.StartTimestamp ||
                    (this.StartTimestamp != null &&
                    this.StartTimestamp.Equals(input.StartTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationProtocol != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationProtocol.GetHashCode();
                }
                if (this.AssociationId != null)
                {
                    hashCode = (hashCode * 59) + this.AssociationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionMode.GetHashCode();
                if (this.DestinationHost != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationHost.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FilteringPolicy.GetHashCode();
                hashCode = (hashCode * 59) + this.RecordingPolicy.GetHashCode();
                if (this.StartTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.StartTimestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
