/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2025.2.3
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Gateway.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// MonitorResult
    /// </summary>
    [DataContract(Name = "MonitorResult")]
    public partial class MonitorResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MonitorResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorResult" /> class.
        /// </summary>
        /// <param name="monitorId">monitorId (required).</param>
        /// <param name="requestStartTime">requestStartTime (required).</param>
        /// <param name="responseMessage">responseMessage.</param>
        /// <param name="responseSuccess">responseSuccess (required).</param>
        /// <param name="responseTime">Duration it took for the response to be received, in seconds.  On error, this value is set to f64::INFINITY. (required).</param>
        public MonitorResult(string monitorId = default(string), DateTime requestStartTime = default(DateTime), string responseMessage = default(string), bool responseSuccess = default(bool), double responseTime = default(double))
        {
            // to ensure "monitorId" is required (not null)
            if (monitorId == null)
            {
                throw new ArgumentNullException("monitorId is a required property for MonitorResult and cannot be null");
            }
            this.MonitorId = monitorId;
            this.RequestStartTime = requestStartTime;
            this.ResponseSuccess = responseSuccess;
            this.ResponseTime = responseTime;
            this.ResponseMessage = responseMessage;
        }

        /// <summary>
        /// Gets or Sets MonitorId
        /// </summary>
        [DataMember(Name = "monitor_id", IsRequired = true, EmitDefaultValue = true)]
        public string MonitorId { get; set; }

        /// <summary>
        /// Gets or Sets RequestStartTime
        /// </summary>
        [DataMember(Name = "request_start_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime RequestStartTime { get; set; }

        /// <summary>
        /// Gets or Sets ResponseMessage
        /// </summary>
        [DataMember(Name = "response_message", EmitDefaultValue = true)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Gets or Sets ResponseSuccess
        /// </summary>
        [DataMember(Name = "response_success", IsRequired = true, EmitDefaultValue = true)]
        public bool ResponseSuccess { get; set; }

        /// <summary>
        /// Duration it took for the response to be received, in seconds.  On error, this value is set to f64::INFINITY.
        /// </summary>
        /// <value>Duration it took for the response to be received, in seconds.  On error, this value is set to f64::INFINITY.</value>
        [DataMember(Name = "response_time", IsRequired = true, EmitDefaultValue = true)]
        public double ResponseTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonitorResult {\n");
            sb.Append("  MonitorId: ").Append(MonitorId).Append("\n");
            sb.Append("  RequestStartTime: ").Append(RequestStartTime).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("  ResponseSuccess: ").Append(ResponseSuccess).Append("\n");
            sb.Append("  ResponseTime: ").Append(ResponseTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
