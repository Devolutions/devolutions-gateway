/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2024.3.6
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Gateway.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// Defines DataEncoding
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DataEncoding
    {
        /// <summary>
        /// Enum Multibase for value: Multibase
        /// </summary>
        [EnumMember(Value = "Multibase")]
        Multibase = 1,

        /// <summary>
        /// Enum Base64 for value: Base64
        /// </summary>
        [EnumMember(Value = "Base64")]
        Base64 = 2,

        /// <summary>
        /// Enum Base64Pad for value: Base64Pad
        /// </summary>
        [EnumMember(Value = "Base64Pad")]
        Base64Pad = 3,

        /// <summary>
        /// Enum Base64Url for value: Base64Url
        /// </summary>
        [EnumMember(Value = "Base64Url")]
        Base64Url = 4,

        /// <summary>
        /// Enum Base64UrlPad for value: Base64UrlPad
        /// </summary>
        [EnumMember(Value = "Base64UrlPad")]
        Base64UrlPad = 5
    }

    public static class DataEncodingExtensions
    {
        /// <summary>
        /// Returns the value as string for a given variant
        /// </summary>
        public static string ToValue(this DataEncoding variant)
        {
            switch (variant)
            {
                case DataEncoding.Multibase:
                    return "Multibase";
                case DataEncoding.Base64:
                    return "Base64";
                case DataEncoding.Base64Pad:
                    return "Base64Pad";
                case DataEncoding.Base64Url:
                    return "Base64Url";
                case DataEncoding.Base64UrlPad:
                    return "Base64UrlPad";
                default:
                    throw new ArgumentOutOfRangeException(nameof(variant), $"Unexpected variant: {variant}");
            }
        }
    }

}
