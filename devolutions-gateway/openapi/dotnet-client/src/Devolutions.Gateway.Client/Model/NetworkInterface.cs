/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2023.3.0
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// Network interface configuration
    /// </summary>
    [DataContract(Name = "NetworkInterface")]
    public partial class NetworkInterface : IEquatable<NetworkInterface>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkInterface" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NetworkInterface() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkInterface" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="dnsServers">dnsServers (required).</param>
        /// <param name="gateways">gateways (required).</param>
        /// <param name="ipAddresses">ipAddresses (required).</param>
        /// <param name="macAddress">macAddress.</param>
        /// <param name="name">name (required).</param>
        /// <param name="operationalStatus">operationalStatus (required).</param>
        /// <param name="prefixes">prefixes (required).</param>
        public NetworkInterface(string description = default(string), List<string> dnsServers = default(List<string>), List<string> gateways = default(List<string>), List<string> ipAddresses = default(List<string>), string macAddress = default(string), string name = default(string), bool operationalStatus = default(bool), List<List<string>> prefixes = default(List<List<string>>))
        {
            // to ensure "dnsServers" is required (not null)
            if (dnsServers == null)
            {
                throw new ArgumentNullException("dnsServers is a required property for NetworkInterface and cannot be null");
            }
            this.DnsServers = dnsServers;
            // to ensure "gateways" is required (not null)
            if (gateways == null)
            {
                throw new ArgumentNullException("gateways is a required property for NetworkInterface and cannot be null");
            }
            this.Gateways = gateways;
            // to ensure "ipAddresses" is required (not null)
            if (ipAddresses == null)
            {
                throw new ArgumentNullException("ipAddresses is a required property for NetworkInterface and cannot be null");
            }
            this.IpAddresses = ipAddresses;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for NetworkInterface and cannot be null");
            }
            this.Name = name;
            this.OperationalStatus = operationalStatus;
            // to ensure "prefixes" is required (not null)
            if (prefixes == null)
            {
                throw new ArgumentNullException("prefixes is a required property for NetworkInterface and cannot be null");
            }
            this.Prefixes = prefixes;
            this.Description = description;
            this.MacAddress = macAddress;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DnsServers
        /// </summary>
        [DataMember(Name = "dns_servers", IsRequired = true, EmitDefaultValue = true)]
        public List<string> DnsServers { get; set; }

        /// <summary>
        /// Gets or Sets Gateways
        /// </summary>
        [DataMember(Name = "gateways", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Gateways { get; set; }

        /// <summary>
        /// Gets or Sets IpAddresses
        /// </summary>
        [DataMember(Name = "ip_addresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> IpAddresses { get; set; }

        /// <summary>
        /// Gets or Sets MacAddress
        /// </summary>
        [DataMember(Name = "mac_address", EmitDefaultValue = true)]
        public string MacAddress { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OperationalStatus
        /// </summary>
        [DataMember(Name = "operational_status", IsRequired = true, EmitDefaultValue = true)]
        public bool OperationalStatus { get; set; }

        /// <summary>
        /// Gets or Sets Prefixes
        /// </summary>
        [DataMember(Name = "prefixes", IsRequired = true, EmitDefaultValue = true)]
        public List<List<string>> Prefixes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NetworkInterface {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DnsServers: ").Append(DnsServers).Append("\n");
            sb.Append("  Gateways: ").Append(Gateways).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OperationalStatus: ").Append(OperationalStatus).Append("\n");
            sb.Append("  Prefixes: ").Append(Prefixes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkInterface);
        }

        /// <summary>
        /// Returns true if NetworkInterface instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkInterface input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DnsServers == input.DnsServers ||
                    this.DnsServers != null &&
                    input.DnsServers != null &&
                    this.DnsServers.SequenceEqual(input.DnsServers)
                ) && 
                (
                    this.Gateways == input.Gateways ||
                    this.Gateways != null &&
                    input.Gateways != null &&
                    this.Gateways.SequenceEqual(input.Gateways)
                ) && 
                (
                    this.IpAddresses == input.IpAddresses ||
                    this.IpAddresses != null &&
                    input.IpAddresses != null &&
                    this.IpAddresses.SequenceEqual(input.IpAddresses)
                ) && 
                (
                    this.MacAddress == input.MacAddress ||
                    (this.MacAddress != null &&
                    this.MacAddress.Equals(input.MacAddress))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OperationalStatus == input.OperationalStatus ||
                    this.OperationalStatus.Equals(input.OperationalStatus)
                ) && 
                (
                    this.Prefixes == input.Prefixes ||
                    this.Prefixes != null &&
                    input.Prefixes != null &&
                    this.Prefixes.SequenceEqual(input.Prefixes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DnsServers != null)
                {
                    hashCode = (hashCode * 59) + this.DnsServers.GetHashCode();
                }
                if (this.Gateways != null)
                {
                    hashCode = (hashCode * 59) + this.Gateways.GetHashCode();
                }
                if (this.IpAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddresses.GetHashCode();
                }
                if (this.MacAddress != null)
                {
                    hashCode = (hashCode * 59) + this.MacAddress.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OperationalStatus.GetHashCode();
                if (this.Prefixes != null)
                {
                    hashCode = (hashCode * 59) + this.Prefixes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
