/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2025.1.4
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Gateway.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// PreflightOutput
    /// </summary>
    [DataContract(Name = "PreflightOutput")]
    public partial class PreflightOutput : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AlertStatus
        /// </summary>
        [DataMember(Name = "alert_status", EmitDefaultValue = true)]
        public PreflightAlertStatus? AlertStatus { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", IsRequired = true, EmitDefaultValue = true)]
        public PreflightOutputKind Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreflightOutput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreflightOutput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreflightOutput" /> class.
        /// </summary>
        /// <param name="agentVersion">Agent service version, if installed.  Set for \&quot;agent-version\&quot; kind..</param>
        /// <param name="alertMessage">Message describing the problem.  Set for \&quot;alert\&quot; kind..</param>
        /// <param name="alertStatus">alertStatus.</param>
        /// <param name="kind">kind (required).</param>
        /// <param name="operationId">The ID of the preflight operation associated to this result. (required).</param>
        /// <param name="recordingStorageAvailableSpace">The remaining available space to store recordings, in bytes.  set for \&quot;recording-storage-health\&quot; kind..</param>
        /// <param name="recordingStorageIsWriteable">Whether the recording storage is writeable or not.  Set for \&quot;recording-storage-health\&quot; kind..</param>
        /// <param name="recordingStorageTotalSpace">The total space of the disk used to store recordings, in bytes.  Set for \&quot;recording-storage-health\&quot; kind..</param>
        /// <param name="resolvedAddresses">Resolved IP addresses.  Set for \&quot;resolved-host\&quot; kind..</param>
        /// <param name="resolvedHost">Hostname that was resolved.  Set for \&quot;resolved-host\&quot; kind..</param>
        /// <param name="runningSessionCount">Number of running sessions.  Set for \&quot;running-session-count\&quot; kind..</param>
        /// <param name="varVersion">Service version.  Set for \&quot;version\&quot; kind..</param>
        public PreflightOutput(string agentVersion = default(string), string alertMessage = default(string), PreflightAlertStatus? alertStatus = default(PreflightAlertStatus?), PreflightOutputKind kind = default(PreflightOutputKind), Guid operationId = default(Guid), long? recordingStorageAvailableSpace = default(long?), bool? recordingStorageIsWriteable = default(bool?), long? recordingStorageTotalSpace = default(long?), List<string> resolvedAddresses = default(List<string>), string resolvedHost = default(string), int? runningSessionCount = default(int?), string varVersion = default(string))
        {
            this.Kind = kind;
            this.OperationId = operationId;
            this.AgentVersion = agentVersion;
            this.AlertMessage = alertMessage;
            this.AlertStatus = alertStatus;
            this.RecordingStorageAvailableSpace = recordingStorageAvailableSpace;
            this.RecordingStorageIsWriteable = recordingStorageIsWriteable;
            this.RecordingStorageTotalSpace = recordingStorageTotalSpace;
            this.ResolvedAddresses = resolvedAddresses;
            this.ResolvedHost = resolvedHost;
            this.RunningSessionCount = runningSessionCount;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Agent service version, if installed.  Set for \&quot;agent-version\&quot; kind.
        /// </summary>
        /// <value>Agent service version, if installed.  Set for \&quot;agent-version\&quot; kind.</value>
        [DataMember(Name = "agent_version", EmitDefaultValue = true)]
        public string AgentVersion { get; set; }

        /// <summary>
        /// Message describing the problem.  Set for \&quot;alert\&quot; kind.
        /// </summary>
        /// <value>Message describing the problem.  Set for \&quot;alert\&quot; kind.</value>
        [DataMember(Name = "alert_message", EmitDefaultValue = true)]
        public string AlertMessage { get; set; }

        /// <summary>
        /// The ID of the preflight operation associated to this result.
        /// </summary>
        /// <value>The ID of the preflight operation associated to this result.</value>
        [DataMember(Name = "operation_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid OperationId { get; set; }

        /// <summary>
        /// The remaining available space to store recordings, in bytes.  set for \&quot;recording-storage-health\&quot; kind.
        /// </summary>
        /// <value>The remaining available space to store recordings, in bytes.  set for \&quot;recording-storage-health\&quot; kind.</value>
        [DataMember(Name = "recording_storage_available_space", EmitDefaultValue = true)]
        public long? RecordingStorageAvailableSpace { get; set; }

        /// <summary>
        /// Whether the recording storage is writeable or not.  Set for \&quot;recording-storage-health\&quot; kind.
        /// </summary>
        /// <value>Whether the recording storage is writeable or not.  Set for \&quot;recording-storage-health\&quot; kind.</value>
        [DataMember(Name = "recording_storage_is_writeable", EmitDefaultValue = true)]
        public bool? RecordingStorageIsWriteable { get; set; }

        /// <summary>
        /// The total space of the disk used to store recordings, in bytes.  Set for \&quot;recording-storage-health\&quot; kind.
        /// </summary>
        /// <value>The total space of the disk used to store recordings, in bytes.  Set for \&quot;recording-storage-health\&quot; kind.</value>
        [DataMember(Name = "recording_storage_total_space", EmitDefaultValue = true)]
        public long? RecordingStorageTotalSpace { get; set; }

        /// <summary>
        /// Resolved IP addresses.  Set for \&quot;resolved-host\&quot; kind.
        /// </summary>
        /// <value>Resolved IP addresses.  Set for \&quot;resolved-host\&quot; kind.</value>
        [DataMember(Name = "resolved_addresses", EmitDefaultValue = true)]
        public List<string> ResolvedAddresses { get; set; }

        /// <summary>
        /// Hostname that was resolved.  Set for \&quot;resolved-host\&quot; kind.
        /// </summary>
        /// <value>Hostname that was resolved.  Set for \&quot;resolved-host\&quot; kind.</value>
        [DataMember(Name = "resolved_host", EmitDefaultValue = true)]
        public string ResolvedHost { get; set; }

        /// <summary>
        /// Number of running sessions.  Set for \&quot;running-session-count\&quot; kind.
        /// </summary>
        /// <value>Number of running sessions.  Set for \&quot;running-session-count\&quot; kind.</value>
        [DataMember(Name = "running_session_count", EmitDefaultValue = true)]
        public int? RunningSessionCount { get; set; }

        /// <summary>
        /// Service version.  Set for \&quot;version\&quot; kind.
        /// </summary>
        /// <value>Service version.  Set for \&quot;version\&quot; kind.</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreflightOutput {\n");
            sb.Append("  AgentVersion: ").Append(AgentVersion).Append("\n");
            sb.Append("  AlertMessage: ").Append(AlertMessage).Append("\n");
            sb.Append("  AlertStatus: ").Append(AlertStatus).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  RecordingStorageAvailableSpace: ").Append(RecordingStorageAvailableSpace).Append("\n");
            sb.Append("  RecordingStorageIsWriteable: ").Append(RecordingStorageIsWriteable).Append("\n");
            sb.Append("  RecordingStorageTotalSpace: ").Append(RecordingStorageTotalSpace).Append("\n");
            sb.Append("  ResolvedAddresses: ").Append(ResolvedAddresses).Append("\n");
            sb.Append("  ResolvedHost: ").Append(ResolvedHost).Append("\n");
            sb.Append("  RunningSessionCount: ").Append(RunningSessionCount).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RecordingStorageAvailableSpace (long?) minimum
            if (this.RecordingStorageAvailableSpace < (long?)0)
            {
                yield return new ValidationResult("Invalid value for RecordingStorageAvailableSpace, must be a value greater than or equal to 0.", new [] { "RecordingStorageAvailableSpace" });
            }

            // RecordingStorageTotalSpace (long?) minimum
            if (this.RecordingStorageTotalSpace < (long?)0)
            {
                yield return new ValidationResult("Invalid value for RecordingStorageTotalSpace, must be a value greater than or equal to 0.", new [] { "RecordingStorageTotalSpace" });
            }

            // RunningSessionCount (int?) minimum
            if (this.RunningSessionCount < (int?)0)
            {
                yield return new ValidationResult("Invalid value for RunningSessionCount, must be a value greater than or equal to 0.", new [] { "RunningSessionCount" });
            }

            yield break;
        }
    }

}
