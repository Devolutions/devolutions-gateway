/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2023.3.0
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// AppTokenSignRequest
    /// </summary>
    [DataContract(Name = "AppTokenSignRequest")]
    public partial class AppTokenSignRequest : IEquatable<AppTokenSignRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "content_type", IsRequired = true, EmitDefaultValue = true)]
        public AppTokenContentType ContentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppTokenSignRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppTokenSignRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppTokenSignRequest" /> class.
        /// </summary>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="lifetime">The validity duration in seconds for the app token.  This value cannot exceed the configured maximum lifetime. If no value is provided, the configured maximum lifetime will be granted..</param>
        /// <param name="subject">The username used to request the app token. (required).</param>
        public AppTokenSignRequest(AppTokenContentType contentType = default(AppTokenContentType), long? lifetime = default(long?), string subject = default(string))
        {
            this.ContentType = contentType;
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for AppTokenSignRequest and cannot be null");
            }
            this.Subject = subject;
            this.Lifetime = lifetime;
        }

        /// <summary>
        /// The validity duration in seconds for the app token.  This value cannot exceed the configured maximum lifetime. If no value is provided, the configured maximum lifetime will be granted.
        /// </summary>
        /// <value>The validity duration in seconds for the app token.  This value cannot exceed the configured maximum lifetime. If no value is provided, the configured maximum lifetime will be granted.</value>
        [DataMember(Name = "lifetime", EmitDefaultValue = true)]
        public long? Lifetime { get; set; }

        /// <summary>
        /// The username used to request the app token.
        /// </summary>
        /// <value>The username used to request the app token.</value>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppTokenSignRequest {\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Lifetime: ").Append(Lifetime).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppTokenSignRequest);
        }

        /// <summary>
        /// Returns true if AppTokenSignRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AppTokenSignRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppTokenSignRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContentType == input.ContentType ||
                    this.ContentType.Equals(input.ContentType)
                ) && 
                (
                    this.Lifetime == input.Lifetime ||
                    (this.Lifetime != null &&
                    this.Lifetime.Equals(input.Lifetime))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                if (this.Lifetime != null)
                {
                    hashCode = (hashCode * 59) + this.Lifetime.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Lifetime (long?) minimum
            if (this.Lifetime < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lifetime, must be a value greater than or equal to 0.", new [] { "Lifetime" });
            }

            yield break;
        }
    }

}
