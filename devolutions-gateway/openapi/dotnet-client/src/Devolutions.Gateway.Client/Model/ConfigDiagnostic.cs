/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2022.2.2
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// Service configuration diagnostic
    /// </summary>
    [DataContract(Name = "ConfigDiagnostic")]
    public partial class ConfigDiagnostic : IEquatable<ConfigDiagnostic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigDiagnostic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfigDiagnostic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigDiagnostic" /> class.
        /// </summary>
        /// <param name="hostname">This Gateway&#39;s hostname (required).</param>
        /// <param name="id">This Gateway&#39;s unique ID.</param>
        /// <param name="listeners">listeners (required).</param>
        /// <param name="version">Gateway service version (required).</param>
        public ConfigDiagnostic(string hostname = default(string), Guid id = default(Guid), List<ListenerUrls> listeners = default(List<ListenerUrls>), string version = default(string))
        {
            // to ensure "hostname" is required (not null)
            if (hostname == null)
            {
                throw new ArgumentNullException("hostname is a required property for ConfigDiagnostic and cannot be null");
            }
            this.Hostname = hostname;
            // to ensure "listeners" is required (not null)
            if (listeners == null)
            {
                throw new ArgumentNullException("listeners is a required property for ConfigDiagnostic and cannot be null");
            }
            this.Listeners = listeners;
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new ArgumentNullException("version is a required property for ConfigDiagnostic and cannot be null");
            }
            this._Version = version;
            this.Id = id;
        }

        /// <summary>
        /// This Gateway&#39;s hostname
        /// </summary>
        /// <value>This Gateway&#39;s hostname</value>
        [DataMember(Name = "hostname", IsRequired = true, EmitDefaultValue = false)]
        public string Hostname { get; set; }

        /// <summary>
        /// This Gateway&#39;s unique ID
        /// </summary>
        /// <value>This Gateway&#39;s unique ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Listeners
        /// </summary>
        [DataMember(Name = "listeners", IsRequired = true, EmitDefaultValue = false)]
        public List<ListenerUrls> Listeners { get; set; }

        /// <summary>
        /// Gateway service version
        /// </summary>
        /// <value>Gateway service version</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigDiagnostic {\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Listeners: ").Append(Listeners).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigDiagnostic);
        }

        /// <summary>
        /// Returns true if ConfigDiagnostic instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigDiagnostic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigDiagnostic input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Listeners == input.Listeners ||
                    this.Listeners != null &&
                    input.Listeners != null &&
                    this.Listeners.SequenceEqual(input.Listeners)
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hostname != null)
                {
                    hashCode = (hashCode * 59) + this.Hostname.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Listeners != null)
                {
                    hashCode = (hashCode * 59) + this.Listeners.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
