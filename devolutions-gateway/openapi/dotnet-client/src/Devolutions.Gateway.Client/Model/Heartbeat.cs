/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2024.1.3
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// Heartbeat
    /// </summary>
    [DataContract(Name = "Heartbeat")]
    public partial class Heartbeat : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Heartbeat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Heartbeat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Heartbeat" /> class.
        /// </summary>
        /// <param name="hostname">This Gateway&#39;s hostname (required).</param>
        /// <param name="id">This Gateway&#39;s unique ID.</param>
        /// <param name="runningSessionCount">Number of running sessions (required).</param>
        /// <param name="varVersion">Gateway service version (required).</param>
        public Heartbeat(string hostname = default(string), Guid? id = default(Guid?), int runningSessionCount = default(int), string varVersion = default(string))
        {
            // to ensure "hostname" is required (not null)
            if (hostname == null)
            {
                throw new ArgumentNullException("hostname is a required property for Heartbeat and cannot be null");
            }
            this.Hostname = hostname;
            this.RunningSessionCount = runningSessionCount;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for Heartbeat and cannot be null");
            }
            this.VarVersion = varVersion;
            this.Id = id;
        }

        /// <summary>
        /// This Gateway&#39;s hostname
        /// </summary>
        /// <value>This Gateway&#39;s hostname</value>
        [DataMember(Name = "hostname", IsRequired = true, EmitDefaultValue = true)]
        public string Hostname { get; set; }

        /// <summary>
        /// This Gateway&#39;s unique ID
        /// </summary>
        /// <value>This Gateway&#39;s unique ID</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Number of running sessions
        /// </summary>
        /// <value>Number of running sessions</value>
        [DataMember(Name = "running_session_count", IsRequired = true, EmitDefaultValue = true)]
        public int RunningSessionCount { get; set; }

        /// <summary>
        /// Gateway service version
        /// </summary>
        /// <value>Gateway service version</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Heartbeat {\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RunningSessionCount: ").Append(RunningSessionCount).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RunningSessionCount (int) minimum
            if (this.RunningSessionCount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunningSessionCount, must be a value greater than or equal to 0.", new [] { "RunningSessionCount" });
            }

            yield break;
        }
    }

}
