/*
 * devolutions-gateway
 *
 * Protocol-aware fine-grained relay server
 *
 * The version of the OpenAPI document: 2025.2.1
 * Contact: infos@devolutions.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Devolutions.Gateway.Client.Client.FileParameter;
using OpenAPIDateConverter = Devolutions.Gateway.Client.Client.OpenAPIDateConverter;

namespace Devolutions.Gateway.Client.Model
{
    /// <summary>
    /// InterfaceInfo
    /// </summary>
    [DataContract(Name = "InterfaceInfo")]
    public partial class InterfaceInfo : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Family
        /// </summary>
        [DataMember(Name = "family", IsRequired = true, EmitDefaultValue = true)]
        public AddressFamily Family { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InterfaceInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InterfaceInfo" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="broadcast">broadcast.</param>
        /// <param name="family">family (required).</param>
        /// <param name="mac">mac.</param>
        /// <param name="netmask">netmask.</param>
        public InterfaceInfo(string address = default(string), string broadcast = default(string), AddressFamily family = default(AddressFamily), string mac = default(string), string netmask = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for InterfaceInfo and cannot be null");
            }
            this.Address = address;
            this.Family = family;
            this.Broadcast = broadcast;
            this.Mac = mac;
            this.Netmask = netmask;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Broadcast
        /// </summary>
        [DataMember(Name = "broadcast", EmitDefaultValue = true)]
        public string Broadcast { get; set; }

        /// <summary>
        /// Gets or Sets Mac
        /// </summary>
        [DataMember(Name = "mac", EmitDefaultValue = true)]
        public string Mac { get; set; }

        /// <summary>
        /// Gets or Sets Netmask
        /// </summary>
        [DataMember(Name = "netmask", EmitDefaultValue = true)]
        public string Netmask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InterfaceInfo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Broadcast: ").Append(Broadcast).Append("\n");
            sb.Append("  Family: ").Append(Family).Append("\n");
            sb.Append("  Mac: ").Append(Mac).Append("\n");
            sb.Append("  Netmask: ").Append(Netmask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
