openapi: 3.0.3
info:
  title: devolutions-gateway
  description: Protocol-aware fine-grained relay server
  contact:
    name: Devolutions Inc.
    email: infos@devolutions.net
  license:
    name: MIT/Apache-2.0
  version: 2024.3.6
paths:
  /jet/config:
    patch:
      tags:
      - Config
      summary: Modifies configuration
      operationId: PatchConfig
      requestBody:
        description: JSON-encoded configuration patch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigPatch'
        required: true
      responses:
        '200':
          description: Configuration has been patched with success
        '400':
          description: Bad patch request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to patch configuration
      security:
      - scope_token:
        - gateway.config.write
  /jet/diagnostics/clock:
    get:
      tags:
      - Diagnostics
      summary: Retrieves server's clock in order to diagnose clock drifting.
      description: |-
        This route is not secured by access token.
        Indeed, this route is used to retrieve server's clock when diagnosing clock drifting.
        If there is clock drift, token validation will fail because claims such as `nbf` will then
        be invalid, and thus prevent the clock drift diagnosis.
      operationId: GetClockDiagnostic
      responses:
        '200':
          description: Server's clock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClockDiagnostic'
  /jet/diagnostics/configuration:
    get:
      tags:
      - Diagnostics
      summary: Retrieves a subset of the configuration, for diagnosis purposes.
      description: |-
        This route primary function is to help with configuration diagnosis (e.g.: ID mismatch, hostname mismatch,
        outdated version). In addition, it may be used to retrieve the listener URLs. This information can be used to
        provide configuration auto-filling, in order to assist the end user.

        It must be noted that this route will never return the whole configuration file as-is, for security reasons.
        For an exhaustive list of returned keys, refer to the `ConfigDiagnostic` component definition.
      operationId: GetConfigurationDiagnostic
      responses:
        '200':
          description: Service configuration diagnostic (including version)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigDiagnostic'
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
      security:
      - scope_token:
        - gateway.diagnostics.read
  /jet/diagnostics/logs:
    get:
      tags:
      - Diagnostics
      summary: Retrieves latest logs.
      operationId: GetLogs
      responses:
        '200':
          description: Latest logs
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to retrieve logs
      security:
      - scope_token:
        - gateway.diagnostics.read
  /jet/health:
    get:
      tags:
      - Health
      summary: Performs a health check
      operationId: GetHealth
      responses:
        '200':
          description: Identity for this Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
        '400':
          description: Invalid Accept header
  /jet/heartbeat:
    get:
      tags:
      - Heartbeat
      summary: Performs a heartbeat check
      operationId: GetHeartbeat
      responses:
        '200':
          description: Heartbeat for this Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Heartbeat'
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
      security:
      - scope_token:
        - gateway.heartbeat.read
  /jet/jrec/delete:
    delete:
      tags:
      - Jrec
      summary: Mass-deletes recordings stored on this instance
      description: |-
        If you try to delete more than 50,000 recordings at once, you should split the list into multiple requests.
        Bigger payloads will be rejected with 413 Payload Too Large.

        The request processing consist in
        1) checking if one of the recording is active,
        2) counting the number of recordings not found on this instance.

        When a recording is not found on this instance, a counter is incremented.
        This number is returned as part of the response.
        You may use this information to detect anomalies on your side.
        For instance, this suggests the list of recordings on your side is out of date,
        and you may want re-index.
      operationId: DeleteManyRecordings
      requestBody:
        description: JSON-encoded list of session IDs
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
        required: true
      responses:
        '200':
          description: Mass recording deletion task was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteManyResult'
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '406':
          description: A recording is still ongoing and can't be deleted yet (nothing is deleted)
        '413':
          description: Request payload is too large
      security:
      - scope_token:
        - gateway.recording.delete
  /jet/jrec/delete/{id}:
    delete:
      tags:
      - Jrec
      summary: Deletes a recording stored on this instance
      operationId: DeleteRecording
      parameters:
      - name: id
        in: path
        description: Recorded session ID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Recording matching the ID in the path has been deleted
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '404':
          description: The specified recording was not found
        '406':
          description: The recording is still ongoing and can't be deleted yet
      security:
      - scope_token:
        - gateway.recording.delete
  /jet/jrec/list:
    get:
      tags:
      - Jrec
      summary: Lists all recordings stored on this instance
      operationId: ListRecordings
      parameters:
      - name: active
        in: query
        description: When true, only the active recordings are returned
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: List of recordings on this Gateway instance
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
      security:
      - scope_token:
        - gateway.recordings.read
  /jet/jrec/pull/{id}/{filename}:
    get:
      tags:
      - Jrec
      summary: Retrieves a recording file for a given session
      operationId: PullRecordingFile
      parameters:
      - name: id
        in: path
        description: Recorded session ID
        required: true
        schema:
          type: string
          format: uuid
      - name: filename
        in: path
        description: Name of recording file to retrieve
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Recording file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '404':
          description: File not found
      security:
      - jrec_token:
        - pull
  /jet/jrl:
    post:
      tags:
      - Jrl
      summary: Updates JRL (Json Revocation List) using a JRL token
      operationId: UpdateJrl
      responses:
        '200':
          description: JRL updated successfully
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to update the JRL
      security:
      - jrl_token: []
  /jet/jrl/info:
    get:
      tags:
      - Jrl
      summary: Retrieves current JRL (Json Revocation List) info
      operationId: GetJrlInfo
      responses:
        '200':
          description: Current JRL Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JrlInfo'
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to update the JRL
      security:
      - scope_token:
        - gateway.jrl.read
  /jet/session/{id}/terminate:
    post:
      tags:
      - Sessions
      summary: Terminate forcefully a running session
      operationId: TerminateSession
      parameters:
      - name: id
        in: path
        description: Session / association ID of the session to terminate
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Session terminated successfully
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '404':
          description: No running session found with provided ID
        '500':
          description: Unexpected server error
      security:
      - scope_token:
        - gateway.session.terminate
  /jet/sessions:
    get:
      tags:
      - Sessions
      summary: Lists running sessions
      operationId: GetSessions
      responses:
        '200':
          description: Running sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionInfo'
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '500':
          description: Unexpected server error
      security:
      - scope_token:
        - gateway.sessions.read
  /jet/update:
    post:
      tags:
      - Update
      summary: Triggers Devolutions Gateway update process.
      description: |-
        This is done via updating `Agent/update.json` file, which is then read by Devolutions Agent
        when changes are detected. If the version written to `update.json` is indeed higher than the
        currently installed version, Devolutions Agent will proceed with the update process.
      operationId: TriggerUpdate
      parameters:
      - name: version
        in: query
        description: The version to install; use 'latest' for the latest version, or 'w.x.y.z' for a specific version
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Update request has been processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
        '400':
          description: Bad request
        '401':
          description: Invalid or missing authorization token
        '403':
          description: Insufficient permissions
        '500':
          description: Agent updater service is malfunctioning
        '503':
          description: Agent updater service is unavailable
      security:
      - scope_token:
        - gateway.update
  /jet/webapp/app-token:
    post:
      tags:
      - WebApp
      summary: Requests a web application token using the configured authorization method
      operationId: SignAppToken
      requestBody:
        description: JSON-encoded payload specifying the desired claims
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppTokenSignRequest'
        required: true
      responses:
        '200':
          description: The application token has been granted
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad signature request
        '401':
          description: Invalid or missing authorization header
        '403':
          description: Insufficient permissions
        '415':
          description: Unsupported content type in request body
      security:
      - {}
      - web_app_custom_auth: []
  /jet/webapp/session-token:
    post:
      tags:
      - WebApp
      summary: Requests a session token using a web application token
      operationId: SignSessionToken
      requestBody:
        description: JSON-encoded payload specifying the desired claims
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionTokenSignRequest'
        required: true
      responses:
        '200':
          description: The application token has been granted
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad signature request
        '401':
          description: Invalid or missing authorization header
        '403':
          description: Insufficient permissions
        '415':
          description: Unsupported content type in request body
      security:
      - web_app_token: []
components:
  schemas:
    AccessScope:
      type: string
      enum:
      - '*'
      - gateway.sessions.read
      - gateway.session.terminate
      - gateway.associations.read
      - gateway.diagnostics.read
      - gateway.jrl.read
      - gateway.config.write
      - gateway.heartbeat.read
      - gateway.recording.delete
      - gateway.recordings.read
      - gateway.update
    AppTokenContentType:
      type: string
      enum:
      - WEBAPP
    AppTokenSignRequest:
      type: object
      required:
      - content_type
      - subject
      properties:
        content_type:
          $ref: '#/components/schemas/AppTokenContentType'
        lifetime:
          type: integer
          format: int64
          description: |-
            The validity duration in seconds for the app token.

            This value cannot exceed the configured maximum lifetime.
            If no value is provided, the configured maximum lifetime will be granted.
          nullable: true
          minimum: 0
        subject:
          type: string
          description: The username used to request the app token.
    ClockDiagnostic:
      type: object
      required:
      - timestamp_secs
      - timestamp_millis
      properties:
        timestamp_millis:
          type: integer
          format: int64
          description: Current time in milliseconds
        timestamp_secs:
          type: integer
          format: int64
          description: Current time in seconds
    ConfigDiagnostic:
      type: object
      description: Service configuration diagnostic
      required:
      - hostname
      - version
      - listeners
      properties:
        hostname:
          type: string
          description: This Gateway's hostname
        id:
          type: string
          format: uuid
          description: This Gateway's unique ID
          nullable: true
        listeners:
          type: array
          items:
            $ref: '#/components/schemas/ListenerUrls'
          description: Listeners configured on this instance
        version:
          type: string
          description: Gateway service version
    ConfigPatch:
      type: object
      properties:
        Id:
          type: string
          format: uuid
          description: This Gateway's unique ID
          nullable: true
        SubProvisionerPublicKey:
          allOf:
          - $ref: '#/components/schemas/SubProvisionerKey'
          nullable: true
        Subscriber:
          allOf:
          - $ref: '#/components/schemas/Subscriber'
          nullable: true
    ConnectionMode:
      type: string
      enum:
      - rdv
      - fwd
    DataEncoding:
      type: string
      enum:
      - Multibase
      - Base64
      - Base64Pad
      - Base64Url
      - Base64UrlPad
    DeleteManyResult:
      type: object
      required:
      - found_count
      - not_found_count
      properties:
        found_count:
          type: integer
          description: Number of recordings found
          minimum: 0
        not_found_count:
          type: integer
          description: Number of recordings not found
          minimum: 0
    Heartbeat:
      type: object
      required:
      - hostname
      - version
      - running_session_count
      properties:
        agent_version:
          type: string
          description: Agent version, if installed
          nullable: true
        hostname:
          type: string
          description: This Gateway's hostname
        id:
          type: string
          format: uuid
          description: This Gateway's unique ID
          nullable: true
        recording_storage_available_space:
          type: integer
          format: int64
          description: |-
            The remaining available space to store recordings, in bytes.

            Since v2024.1.6.
          nullable: true
          minimum: 0
        recording_storage_is_writeable:
          type: boolean
          description: |-
            Whether the recording storage is writeable or not.

            Since v2024.1.6.
          nullable: true
        recording_storage_total_space:
          type: integer
          format: int64
          description: |-
            The total space of the disk used to store recordings, in bytes.

            Since v2024.1.6.
          nullable: true
          minimum: 0
        running_session_count:
          type: integer
          description: Number of running sessions
          minimum: 0
        version:
          type: string
          description: Gateway service version
    Identity:
      type: object
      required:
      - hostname
      properties:
        hostname:
          type: string
          description: This Gateway's hostname
        id:
          type: string
          format: uuid
          description: This Gateway's unique ID
          nullable: true
        version:
          type: string
          description: Gateway service version
          nullable: true
    JrlInfo:
      type: object
      required:
      - jti
      - iat
      properties:
        iat:
          type: integer
          format: int64
          description: JWT "Issued At" claim of JRL
        jti:
          type: string
          format: uuid
          description: Unique ID for current JRL
    ListenerUrls:
      type: object
      required:
      - internal_url
      - external_url
      properties:
        external_url:
          type: string
          description: URL to use from external networks
        internal_url:
          type: string
          description: URL to use on local network
    PubKeyFormat:
      type: string
      enum:
      - Spki
      - Pkcs1
    SessionInfo:
      type: object
      description: Information about an ongoing Gateway session
      required:
      - association_id
      - application_protocol
      - recording_policy
      - filtering_policy
      - start_timestamp
      - connection_mode
      properties:
        application_protocol:
          type: string
          description: Protocol used during this session
        association_id:
          type: string
          format: uuid
          description: Unique ID for this session
        connection_mode:
          $ref: '#/components/schemas/ConnectionMode'
        destination_host:
          type: string
          description: Destination Host
          nullable: true
        filtering_policy:
          type: boolean
          description: Filtering Policy
        recording_policy:
          type: boolean
          description: Recording Policy
        start_timestamp:
          type: string
          format: date-time
          description: Date this session was started
        time_to_live:
          type: integer
          format: int64
          description: Maximum session duration in minutes (0 is used for the infinite duration)
          nullable: true
          minimum: 0
    SessionTokenContentType:
      type: string
      enum:
      - ASSOCIATION
      - JMUX
      - KDC
    SessionTokenSignRequest:
      type: object
      required:
      - content_type
      - lifetime
      properties:
        content_type:
          $ref: '#/components/schemas/SessionTokenContentType'
        destination:
          type: string
          description: Destination host
          nullable: true
        krb_kdc:
          type: string
          description: |-
            Kerberos KDC address.

            E.g.: `tcp://IT-HELP-DC.ad.it-help.ninja:88`.
            Default scheme is `tcp`.
            Default port is `88`.
          nullable: true
        krb_realm:
          type: string
          description: |-
            Kerberos realm.

            E.g.: `ad.it-help.ninja`.
            Should be lowercased (actual validation is case-insensitive though).
          nullable: true
        lifetime:
          type: integer
          format: int64
          description: |-
            The validity duration in seconds for the session token.

            This value cannot exceed 2 hours.
          minimum: 0
        protocol:
          type: string
          description: 'Protocol for the session (e.g.: "rdp")'
          nullable: true
        session_id:
          type: string
          format: uuid
          description: Unique ID for this session
          nullable: true
    SubProvisionerKey:
      type: object
      required:
      - Id
      - Value
      properties:
        Encoding:
          allOf:
          - $ref: '#/components/schemas/DataEncoding'
          nullable: true
        Format:
          allOf:
          - $ref: '#/components/schemas/PubKeyFormat'
          nullable: true
        Id:
          type: string
          description: The key ID for this subkey
        Value:
          type: string
          description: The binary-to-text-encoded key data
    Subscriber:
      type: object
      description: Subscriber configuration
      required:
      - Url
      - Token
      properties:
        Token:
          type: string
          description: Bearer token to use when making HTTP requests
        Url:
          type: string
          description: HTTP URL where notification messages are to be sent
    UpdateResponse:
      type: object
  securitySchemes:
    jrec_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token allowing recording retrieval for a specific session ID
    jrl_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Contains the JRL to apply if newer
    netscan_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token allowing usage of the network exploration endpoints
    scope_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token allowing a single HTTP request for a specific scope
    web_app_custom_auth:
      type: http
      scheme: basic
      description: Custom authentication method for the standalone web application
    web_app_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token allowing usage of the standalone web application

